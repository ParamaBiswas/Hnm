#pragma checksum "E:\CenterPoint\CenterPointPortal\SupplierPortal\Views\Supplier\QuotationRequisition.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "fc6a5f2d681d91903896de365a2b97aeb92bd0b8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Supplier_QuotationRequisition), @"mvc.1.0.view", @"/Views/Supplier/QuotationRequisition.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Supplier/QuotationRequisition.cshtml", typeof(AspNetCore.Views_Supplier_QuotationRequisition))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\CenterPoint\CenterPointPortal\SupplierPortal\Views\_ViewImports.cshtml"
using SupplierPortal;

#line default
#line hidden
#line 2 "E:\CenterPoint\CenterPointPortal\SupplierPortal\Views\_ViewImports.cshtml"
using SupplierPortal.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fc6a5f2d681d91903896de365a2b97aeb92bd0b8", @"/Views/Supplier/QuotationRequisition.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"a6e8c27bc452b3957f3b8a9892eba34b8580a3cd", @"/Views/_ViewImports.cshtml")]
    public class Views_Supplier_QuotationRequisition : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "E:\CenterPoint\CenterPointPortal\SupplierPortal\Views\Supplier\QuotationRequisition.cshtml"
  
    ViewData["Title"] = "QuotationRequisition";

#line default
#line hidden
            BeginContext(56, 25505, true);
            WriteLiteral(@"

<script type=""text/javascript"">

    var objRFPProcessing;
    var purchaseRequisitions;
    var conditionArray = [];

    var Price;
    var VatRate;
    var TotalRate;
    var primaryRowID;

    var SubTotal = 0;
    var VatTotal = 0;
    var GrandTotal = 0;

    var rfpProcessCode;
    var TotalVat;


    var arrayQuotationItemList_VW = [];
    var arrayQuotationConditionList_VW = [];
    var arrayQuotationItemSpecificationList_VW = [];


    var server = ""http://192.168.20.161"";


    var productTableRowNumber = 0;
    var tcTableRowNumber = 0;


    var jObjMain = {
        ""QuotationNo"": """",
        ""QuotationDate"": """",
        ""Remarks"": """",
        ""RFProcessCode"": """",
        ""SupplierCode"": """",
        ""IsFinalSelection"": """",
        ""ApprovalAction"": """",
        ""IsApproved"": """",
        ""QuotationCode_PK"": """",
        ""CompanyCode_FK"": """",
        ""ActionType"": """",
        ""UserCode"": """",
        ""ActionDate"": """",
        ""QuotationItemList_VW"":
  ");
            WriteLiteral(@"          [{
            }],
        ""QuotationConditionList_VW"":
            [{
            }]
    };






    window.onload = function () {
        getCurrentDate();
        //rfpIdDropDownList();

    }



    function rfpIdDropDownList() {

        $.ajax({
            url: server + ""/Procurement/api/RFPProcessing/GetRFPProcessingList"",
            type: ""Get"",
            datatype: ""JSON"",
            contentType: ""application/json"",
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {
                for (var i = 0; i < data.rFProcessings.length; i++) {
                    $(""#rfpIdDropDownList"").get(0).options[i] = new Option(data.rFProcessings[i].rfProcessId, data.rFProcessings[i].rfProcessCode_PK, i);

                }

            },
            error: function () {
                alert(""Failed to load RFP ID"");

            }
        });

");
            WriteLiteral(@"    }

    function getCurrentDate() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd
        }

        if (mm < 10) {
            mm = '0' + mm
        }

        today = yyyy + '-' + mm + '-' + dd;
        //console.log(today);
        document.getElementById(""quotationDate"").value = today;
    }



    function PopUpBtnClick() {
        debugger
        var vURL = encodeURIComponent(server + ""/Procurement/api/RFPProcessing/GetRFPProcessingList"");

        var vColHeaderName = 'Process  Id, Status';
        var vTitle = 'RFP Process PopUp';
        var vColumn = 'RFProcessId,Status_VW,RFProcessCode_PK';
        var vListName = 'listGeneralCodeFile';
        callModal(""../Requisition/GetData?pDynColumns="" + vColHeaderName + ""&pTitle="" + vTitle + ""&pURL="" + vURL + ""&pColumns="" + vColumn + ""&pListName="" + vListName);");
            WriteLiteral(@"
    }

    function callModal(vURL, vDATA) {
        var vModal = document.getElementById('ModalView');
        var vSpan = document.getElementsByClassName(""close"")[0];

        $.ajax({
            type: ""GET"",
            url: vURL,
            data: vDATA,

            dataType: ""html"",
            success: function (data) {
                $('#DivNew').html(data);

                vModal.style.display = ""block"";

            }

        });
        vSpan.onclick = function () {
            vModal.style.display = ""none"";
        }
    }

    function AssignValueCommonPopUPNewListUI() {
        document.getElementById(""rfpIDTxtField"").value = vCalleeVar1;
        //document.getElementById(""quotationIdTxtField"").value = vCalleeVar2;
        //document.getElementById(""priceLockTxtField"").value = vCalleeVar3;
        rfpProcessCode = vCalleeVar3;
        GetRFPProcessingByCode(rfpProcessCode);

        var vSpan = document.getElementsByClassName(""close"")[0];
        vSpan.oncli");
            WriteLiteral(@"ck();
    }

    function GetRFPProcessingByCode(rfpProcessCode) {
        debugger
        var rData = rfpProcessCode;


        $.ajax({

            url: server + ""/Procurement/api/RFPProcessing/GetRFProcessingByCode?rFProcessCode="" + rData,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {

                debugger

                objRFPProcessing = data.objRFPProcessing;
                purchaseRequisitions = data.purchaseRequisitions;

                AssignData(objRFPProcessing, purchaseRequisitions);

            },
            error: function () {
                alert(""Failed to load Requisition Data"");

            }
        });
    }

    function AssignData(objRFPProcessing, purchaseRequisitions) {
     ");
            WriteLiteral(@"   document.getElementById(""quotationTypeTxtField"").value = objRFPProcessing.RequisitionTypeName_VW;
        document.getElementById(""priceLockTxtField"").value = purchaseRequisitions.PriceLockName_VW;
        AddToProductDetailsTable(purchaseRequisitions);
        AddToConditionTable(purchaseRequisitions);

    }

    function AddToProductDetailsTable(ObjProductDetails) {

        debugger

        for (var i = 0; i < ObjProductDetails.PurchaseRequisitionItemList_VW.length; i++) {
            DynamicRow();
            document.getElementById(""CategoryName"" + [productTableRowNumber]).innerHTML = ObjProductDetails.PurchaseRequisitionItemList_VW[i].ProductCatagory_VW;
            document.getElementById(""ItemName"" + [productTableRowNumber]).innerHTML = ObjProductDetails.PurchaseRequisitionItemList_VW[i].ProductName_VW;
            document.getElementById(""ItemCode"" + [productTableRowNumber]).innerHTML = ObjProductDetails.PurchaseRequisitionItemList_VW[i].ProductID_VW;

            for (var k = 0");
            WriteLiteral(@"; k < ObjProductDetails.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW.length; k++) {
                if (ObjProductDetails.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW.length > 0) {
                    //var input = document.createElement(""checkbox"");
                    //input.type = ""checkbox"";
                    //input.id = ""SpecificationName"" + [productTableRowNumber]+k;
                    //document.getElementById(""SpecificationName"" + [productTableRowNumber]).appendChild(input).innerHTML = '&nbsp<input type=""checkbox"" onchange=""savePriceFieldData()"" id= ""SpecificationName'+ [productTableRowNumber]+k+'"" name=""condition"" value=""Des' + [tcTableRowNumber] + '"" checked/>""&nbsp&nbsp""' + ObjProductDetails.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW[k].ProductSpecification+'""</br>';
                    var label = document.createElement(ObjProductDetails.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW[k].P");
            WriteLiteral(@"roductSpecification);
                    var description = document.createTextNode(ObjProductDetails.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW[k].ProductSpecification);

                    var checkbox = document.createElement(""input"");
                    checkbox.type = ""checkbox"";
                    checkbox.id = ""SpecificationName"" + [productTableRowNumber] + k;
                    checkbox.value = ObjProductDetails.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW[k].ProductSpecification;
                    checkbox.onchange = ""savePriceFieldData()"";
                    checkbox.onclick = ""savePriceFieldData()"";
                    checkbox.checked = ""savePriceFieldData()"";

                    label.appendChild(checkbox);
                    label.appendChild(description);

                    document.getElementById(""SpecificationName"" + [productTableRowNumber]).appendChild(label); //.innerHTML = '&nbsp<input type=""checkbox"" onchange=""sa");
            WriteLiteral(@"vePriceFieldData()"" id= ""SpecificationName' + [productTableRowNumber] + k + '"" name=""condition"" value=""Des' + [tcTableRowNumber] + '"" checked/>""&nbsp&nbsp""' + ObjProductDetails.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW[k].ProductSpecification + '""</br>';


                }
            }

            document.getElementById(""PRQTY"" + [productTableRowNumber]).innerHTML = ObjProductDetails.PurchaseRequisitionItemList_VW[i].Quantity;
            document.getElementById(""Unit"" + [productTableRowNumber]).innerHTML = ObjProductDetails.PurchaseRequisitionItemList_VW[i].QunatityMOU_VW;
            productTableRowNumber = productTableRowNumber + 1;
        }
    }

    function DynamicRow() {
        debugger;
        table = document.getElementById(""dynamicRow"");
        row = table.insertRow(productTableRowNumber + 1);

        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        var cell4 = row.insertCell");
            WriteLiteral(@"(3);
        var cell5 = row.insertCell(4);
        var cell6 = row.insertCell(5);
        var cell7 = row.insertCell(6);
        var cell8 = row.insertCell(7);
        var cell9 = row.insertCell(8);
        debugger
        cell1.innerHTML = '<td><p id=""CategoryName' + [productTableRowNumber] + '""></p></td>';
        cell2.innerHTML = '<td><p id=""ItemName' + [productTableRowNumber] + '""></p></td>';
        cell3.innerHTML = '<td><p id=""ItemCode' + [productTableRowNumber] + '""></p></td>';
        cell4.innerHTML = '<td><p id=""SpecificationName' + [productTableRowNumber] + '""></p></td>';
        cell5.innerHTML = '<td><p id=""PRQTY' + [productTableRowNumber] + '""></p></td>';
        cell6.innerHTML = '<td><p id=""Unit' + [productTableRowNumber] + '""></p></td>';
        cell7.innerHTML = '<td><input type=""text"" id=""Price' + [productTableRowNumber] + '"" onchange=""savePriceFieldData()""/></td>';
        cell8.innerHTML = '<td><input type=""text"" id=""VatRate' + [productTableRowNumber] + '"" onchange=""save");
            WriteLiteral(@"PriceFieldData()""/></td>';
        cell9.innerHTML = '<td><input type=""text"" id=""Total' + [productTableRowNumber] + '"" onchange=""savePriceFieldData()"" readonly=""readonly""/></td>';

    }



    function savePriceFieldData() {
        debugger

        var tbl = document.getElementById(""dynamicRow"");

        if (tbl != null) {
            for (var i = 0; i < tbl.rows.length; i++) {
                for (var j = 0; j < tbl.rows[i].cells.length; j++)
                    tbl.rows[i].cells[j].onchange = function () { getval(this); };
            }
        }
    }
    function getval(cel) {
        debugger

        var rowId = cel.childNodes[0].id;
        if (rowId.includes(""Price"")) {
            Price = cel.childNodes[0].value;
            //alert(Price);
        }
        else if (rowId.includes(""VatRate"")) {
            VatRate = cel.childNodes[0].value;
            //alert(VatRate);
        }



        for (var i = 0; i < purchaseRequisitions.PurchaseRequisitionItemList_VW.");
            WriteLiteral(@"length; i++) {
            if (rowId.includes(""VatRate"" + i)) {
                var qty = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].Quantity;

                Totals = qty * Price;

                SubTotal = SubTotal + Totals;
                //alert(Totals);
                //document.getElementById('Total' + i).innerHTML = Totals;
                TotalVat = ((Totals * VatRate) / 100);

                VatTotal = VatTotal + TotalVat;

                var TotalAmountOfAProduct = Totals + TotalVat;

                GrandTotal = GrandTotal + TotalAmountOfAProduct;

                document.getElementById(""Total"" + [i]).value = TotalAmountOfAProduct;
                document.getElementById(""subTotalTxtField"").value = SubTotal;
                document.getElementById(""vatTxtField"").value = VatTotal;
                document.getElementById(""grandTotalTxtField"").value = GrandTotal;






                //arrayQuotationItemSpecificationList_VW = [];
            }

       ");
            WriteLiteral(@"     //if (rowId.includes(""SpecificationName"" + i)) {
            //    debugger
            //    var rowId = cel.childNodes[0].id;
            //    for (var j = 0; j < cel.childNodes[i].childNodes.length; j++) {
            //        var rowIds = cel.childNodes[i].childNodes[j].id;




            //        //var isChecked = $(""#rowIds"").is("":checked"");
            //        //if (isChecked) {
            //        //    alert(""CheckBox checked."" + rowIds);
            //        //} else {
            //        //    alert(""CheckBox not checked."" + rowIds);
            //        //}
            //        //$(document).on('change', '[type=checkbox]', function () {

            //        //});


            //    }
            //}
        }


        VatRate = cel.childNodes[0].value;
        TotalRate = cel.childNodes[0].value;
        //alert(cel.childNodes[0].value);



    }






    function AddToConditionTable(ObjProductDetails) {

        debugger

        fo");
            WriteLiteral(@"r (var i = 0; i < ObjProductDetails.PurchaseRequisitionTermsList_VW.length; i++) {
            conditionArray.push(ObjProductDetails.PurchaseRequisitionTermsList_VW[i]);
            var cCode = ObjProductDetails.PurchaseRequisitionTermsList_VW[i].ConditionCode_PK;
            DynamicTCtableRow(cCode);

            document.getElementById(""SlNo"" + [tcTableRowNumber]).innerHTML = ObjProductDetails.PurchaseRequisitionTermsList_VW[i].ConSLNo;
            document.getElementById(""TcType"" + [tcTableRowNumber]).innerHTML = ObjProductDetails.PurchaseRequisitionTermsList_VW[i].Condition_VW;

            var label = document.createElement(ObjProductDetails.PurchaseRequisitionTermsList_VW[i].Remarks);
            var description = document.createTextNode(ObjProductDetails.PurchaseRequisitionTermsList_VW[i].Remarks);


            var checkbox = document.createElement(""input"");
            checkbox.type = ""checkbox"";
            checkbox.id = ""Description"" + [tcTableRowNumber] + i;
            checkbox.che");
            WriteLiteral(@"cked = ""savePriceFieldData()"";
            checkbox.value = ObjProductDetails.PurchaseRequisitionTermsList_VW[i].Remarks;


            label.appendChild(checkbox);
            label.appendChild(description);

            document.getElementById(""Description"" + [tcTableRowNumber]).appendChild(label);

            //document.getElementById(""Description"" + [tcTableRowNumber]).innerHTML = '&nbsp<input type=""checkbox"" name=""condition"" value=""Des' + [tcTableRowNumber] + '"" checked/>&nbsp&nbsp' + ObjProductDetails.PurchaseRequisitionTermsList_VW[i].Remarks + '</br>';

            tcTableRowNumber = tcTableRowNumber + 1;




        }
    }

    function DynamicTCtableRow(ConditionCode) {
        debugger;
        table = document.getElementById(""dynamicTCtableRow"");
        row = table.insertRow(tcTableRowNumber + 1);

        var cell1 = row.insertCell(0);
        var cell2 = row.insertCell(1);
        var cell3 = row.insertCell(2);
        //var cell4 = row.insertCell(3);
        //var");
            WriteLiteral(@" cell5 = row.insertCell(4);

        cell1.innerHTML = '<p id=""SlNo' + [tcTableRowNumber] + '""></p>';
        cell2.innerHTML = '<p id=""TcType' + [tcTableRowNumber] + '""></p>';
        cell3.innerHTML = '<p id=""Description' + [tcTableRowNumber] + '""></p>';
        //cell4.innerHTML = '<button type=""button"" class=""btn-add"" onclick=""EditBox(this)"" style=""width:100px"">Edit</button>';

        //cell5.innerHTML = '<input  id=""btnEditType""  class=""btn-add"" type=""button"" value=""Remove""  onclick=""RemoveTypeRow(this,' + tcTableRowNumber + ',\'' + ConditionCode +'\');"" />';

    }


    function RemoveTypeRow(row, id, ConditionCode) {
        debugger
        var d = row.parentNode.parentNode.rowIndex;
        document.getElementById('dynamicTCtableRow').deleteRow(d);

        var index = findWithAttr(ConditionCode);

        //Remove from main Array
        debugger
        conditionArray.splice(index, 1);
        tcTableRowNumber = tcTableRowNumber - 1;

    }


    function EditTermsRow(i");
            WriteLiteral(@"d, pTcValue) {
        debugger

        var controlToBeRemoved = ""#tblRowDocuments"" + id;

        //Remove from the row
        $(controlToBeRemoved).remove();
        var index = findWithAttr(pTcValue);
        vArray.splice(index, 1);

        //Remove from arraylist
        arrayPurchaseRequisitionTermsList_VW.splice(index, 1);
        start = start - 1;

        //assign the values to the drop down and description textbox
        document.getElementById(""desription"").value = editTermsDescription;


    }

    //To find the index of the ConditionCode_PK from the ArrayList
    function findWithAttr(ConditionCode) {

        if (conditionArray.length > 0) {
            for (var i = 0; i < conditionArray.length; i += 1) {
                if (conditionArray[i][""ConditionCode_PK""] === ConditionCode) {
                    // editTermsDescription = arrayPurchaseRequisitionTermsList_VW[i].Remarks;
                    return i;
                }

            }
        }

        r");
            WriteLiteral(@"eturn -1;
    }

    function SubmitBtnClick() {

        debugger
        var rData = rfpProcessCode;


        $.ajax({

            url: server + ""/Procurement/api/RFPProcessing/GetRFProcessingByCode?rFProcessCode="" + rData,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {

                debugger

                objRFPProcessing = data.objRFPProcessing;
                purchaseRequisitions = data.purchaseRequisitions;

                SaveData(objRFPProcessing, purchaseRequisitions)

            },
            error: function () {
                alert(""Failed to load Requisition Data"");

            }
        });
    }

    function SaveData(objRFPProcessing, purchaseRequisitions) {
        debugger


    ");
            WriteLiteral(@"    jObjMain.QuotationNo = """";
        jObjMain.QuotationDate = $(""#quotationDate"").val();
        jObjMain.Remarks = """";
        jObjMain.RFProcessCode = rfpProcessCode;
        jObjMain.SupplierCode = ""2b8af053-3554-4a1f-98fc-147e9842dea7"";
        jObjMain.IsFinalSelection = 0;
        jObjMain.ApprovalAction = 0;
        jObjMain.IsApproved = 0;
        jObjMain.QuotationCode_PK = """";
        jObjMain.CompanyCode_FK = 1;
        jObjMain.ActionType = ""INSERT"";
        jObjMain.UserCode = ""9C6CA730-34AB-40B2-A0DC-17CD77330B9E"";
        jObjMain.ActionDate = $(""#quotationDate"").val();

        debugger


        for (var i = 0; i < purchaseRequisitions.PurchaseRequisitionItemList_VW.length; i++) {
            var jObjQuotationItemList_VW =
            {
                ""QunatityMOUCode"": """",
                ""RequisitionCode"": """",
                ""ProductType"": """",
                ""Quantity"": """",
                ""RequisitionDetCode"": """",
                ""VATRate"": """",
              ");
            WriteLiteral(@"  ""ProductCode"": """",
                ""TotalVAT"": """",
                ""Rate"": """",
                ""QuotationDetCode_PK"": """",
                ""QuotationItemSpecificationList_VW"": [{

                }]
            };
            jObjQuotationItemList_VW.QunatityMOUCode = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].QunatityMOUCode;
            jObjQuotationItemList_VW.RequisitionCode = purchaseRequisitions.RequisitionCode_PK;
            jObjQuotationItemList_VW.ProductType = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].ProductType;
            jObjQuotationItemList_VW.Quantity = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].Quantity;
            jObjQuotationItemList_VW.RequisitionDetCode = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].RequisitionDetCode_PK;
            jObjQuotationItemList_VW.VATRate = VatRate;
            jObjQuotationItemList_VW.ProductCode = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].ProductCode;
            jObjQuotationIte");
            WriteLiteral(@"mList_VW.TotalVAT = TotalVat;
            jObjQuotationItemList_VW.Rate = Price;
            jObjQuotationItemList_VW.QuotationDetCode_PK = """";

            for (var k = 0; k < purchaseRequisitions.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW.length; k++) {
                if (purchaseRequisitions.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW.length > 0) {

                    //alert($(""#SpecificationName"" + i + k).val());

                    //alert($(""#SpecificationName"" + i + k).prop(""checked""));

                    debugger

                    var isChecked = $(""#SpecificationName"" + i + k).prop(""checked"");


                    var jObjQuotationItemSpecificationList_VW = {
                        ""SpecificationCode"": """",
                        ""QuotationDetCode_FK"": """",
                        ""ProductCode"": """",
                        ""IsSatisfied"": """",
                        ""QuotationItemSpecificationCode_PK"": """"
            ");
            WriteLiteral(@"        };

                    jObjQuotationItemSpecificationList_VW.SpecificationCode = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].PurchaseReqItemSpecificationList_VW[k].SpecificationCode_PK;
                    jObjQuotationItemSpecificationList_VW.QuotationDetCode_FK = """";
                    jObjQuotationItemSpecificationList_VW.ProductCode = purchaseRequisitions.PurchaseRequisitionItemList_VW[i].ProductCode;

                    if (isChecked) {
                        jObjQuotationItemSpecificationList_VW.IsSatisfied = 1;
                    }
                    else {
                        jObjQuotationItemSpecificationList_VW.IsSatisfied = 0;
                    }

                    //jObjQuotationItemSpecificationList_VW.IsSatisfied = 1;
                    jObjQuotationItemSpecificationList_VW.QuotationItemSpecificationCode_PK = """";
                    arrayQuotationItemSpecificationList_VW.push(jObjQuotationItemSpecificationList_VW);

                }
          ");
            WriteLiteral(@"  }

            jObjQuotationItemList_VW.QuotationItemSpecificationList_VW = arrayQuotationItemSpecificationList_VW;
            arrayQuotationItemList_VW.push(jObjQuotationItemList_VW);
            arrayQuotationItemSpecificationList_VW = [];
        }

        for (var i = 0; i < purchaseRequisitions.PurchaseRequisitionTermsList_VW.length; i++) {
            var jObjQuotationConditionList_VW =
            {
                ""ConSLNo"": """",
                ""QuotationCode"": """",
                ""ConditionCode_PK"": """",
                ""Remarks"": """",
                ""IsSatisfied"": """",
                ""ConditionValue"": """",
                ""AchivedValue"": """"
            };

            jObjQuotationConditionList_VW.ConSLNo = purchaseRequisitions.PurchaseRequisitionTermsList_VW[i].ConSLNo;
            jObjQuotationConditionList_VW.QuotationCode = """";
            jObjQuotationConditionList_VW.ConditionCode_PK = purchaseRequisitions.PurchaseRequisitionTermsList_VW[i].ConditionCode_PK;
           ");
            WriteLiteral(@" jObjQuotationConditionList_VW.Remarks = purchaseRequisitions.PurchaseRequisitionTermsList_VW[i].Remarks;

            debugger

            var isChecked = $(""#Description"" + i).prop(""checked"");
            if (isChecked) {
                jObjQuotationConditionList_VW.IsSatisfied = 1;
            }
            else {
                jObjQuotationConditionList_VW.IsSatisfied = 0;
            }


            jObjQuotationConditionList_VW.ConditionValue = 0;
            jObjQuotationConditionList_VW.AchivedValue = 0;
            arrayQuotationConditionList_VW.push(jObjQuotationConditionList_VW);
        }


        jObjMain.QuotationItemList_VW = arrayQuotationItemList_VW;
        jObjMain.QuotationConditionList_VW = arrayQuotationConditionList_VW;

        debugger
        var datas = JSON.stringify(jObjMain);

        $.ajax(
            {

                url: server + ""/Procurement/api/Quotation/CreateQuotation"",
                dataType: ""json"",
                processData: f");
            WriteLiteral(@"alse,
                contentType: 'application/json',
                type: ""POST"",
                data: datas,
                success: function (data) {
                    document.location.reload();
                    alert(""Save Succesfull!"");
                },
                error: function () {
                    alert(""There was error saving data!"");
                }
            }
        );
    }


</script>



<div class=""vid-container"">
    <div class=""wrapper"">
        <div class=""row"">
            <div class=""panel-body"">
                <div class=""col-md-12 w3ls-graph"">
                    <!--agileinfo-grap-->
                    <div class=""agileinfo-grap"">
                        <div class=""agileits-box"">
                            <div class=""agileits-box-body clearfix"">
                                <div id=""hero-area"">
                                    ");
            EndContext();
            BeginContext(25561, 2969, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6ddd75e2226f413db1cbd1025b605c8a", async() => {
                BeginContext(25567, 345, true);
                WriteLiteral(@"
                                        <table>

                                            <tr>
                                                <td width=""40"">
                                                    <b>RFP ID:</b>
                                                </td>
                                                <td>
");
                EndContext();
                BeginContext(26296, 2227, true);
                WriteLiteral(@"                                                    <input type=""text"" id=""rfpIDTxtField"" ondblclick=""PopUpBtnClick()"" readonly=""readonly"" placeholder=""Tap twice"" />
                                                </td>
                                                <td width=""40"">
                                                    <b>Quotation Date:</b>

                                                </td>
                                                <td width=""40"">
                                                    <input type=""date"" id=""quotationDate"" />
                                                </td>
                                                <td width=""40"">
                                                    <b>Quotation Type:</b>

                                                </td>
                                                <td>
                                                    <input type=""text"" id=""quotationTypeTxtField"" readonly=""readonly"" />
                ");
                WriteLiteral(@"                                </td>

                                            </tr>

                                            <tr>
                                                <td width=""40"">
                                                    <b>Quotation ID:</b>

                                                </td>
                                                <td>
                                                    <input type=""text"" id=""quotationIdTxtField"" readonly=""readonly"" placeholder=""Auto Generate"" />
                                                </td>
                                                <td width=""40"">
                                                    <b>Price Lock:</b>

                                                </td>
                                                <td>
                                                    <input type=""text"" id=""priceLockTxtField"" readonly=""readonly"" />
                                                </td>
      ");
                WriteLiteral("                                      </tr>\r\n                                        </table>\r\n                                        <br />\r\n                                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(28530, 880, true);
            WriteLiteral(@"
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--//agileinfo-grap-->

                </div>
            </div>
        </div>

        <div class=""row"">
            <div class=""panel-body"">
                <div class=""col-md-12 w3ls-graph"">
                    <!--agileinfo-grap-->
                    <div class=""agileinfo-grap"">
                        <div class=""agileits-box"">
                            <header class=""agileits-box-header clearfix"">
                                <div class=""toolbar"">

                                </div>
                            </header>
                            <div class=""agileits-box-body clearfix"">
                                <div id=""hero-area"">
                                    ");
            EndContext();
            BeginContext(29410, 1979, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "7b0633b9a79244d89ad81580af80f470", async() => {
                BeginContext(29416, 154, true);
                WriteLiteral("\r\n                                        <fieldset>\r\n                                            <legend style=\"color:brown\">Terms & Condition</legend>\r\n");
                EndContext();
                BeginContext(30460, 480, true);
                WriteLiteral(@"
                                            <table border=""1"" id=""dynamicTCtableRow"">
                                                <thead>
                                                    <tr>
                                                        <th><center>SL No</center></th>
                                                        <th><center>T/C Type</center></th>
                                                        <th><center>Description</center></th>
");
                EndContext();
                BeginContext(31034, 348, true);
                WriteLiteral(@"                                                    </tr>
                                                </thead>
                                                <tbody id=""tblRowDocuments""></tbody>
                                            </table>

                                        </fieldset>
                                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(31389, 882, true);
            WriteLiteral(@"

                                </div>
                            </div>
                        </div>
                    </div>
                    <!--//agileinfo-grap-->

                </div>
            </div>
        </div>

        <div class=""row"">
            <div class=""panel-body"">
                <div class=""col-md-12 w3ls-graph"">
                    <!--agileinfo-grap-->
                    <div class=""agileinfo-grap"">
                        <div class=""agileits-box"">
                            <header class=""agileits-box-header clearfix"">
                                <div class=""toolbar"">

                                </div>
                            </header>
                            <div class=""agileits-box-body clearfix"">
                                <div id=""hero-area"">
                                    ");
            EndContext();
            BeginContext(32271, 1451, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "361963a84c4a4478bb86959dd1850014", async() => {
                BeginContext(32277, 1438, true);
                WriteLiteral(@"
                                        <fieldset>
                                            <legend style=""color:brown"">Product/Service Details</legend>
                                            <div>
                                                <table border=""1"" id=""dynamicRow"">
                                                    <tr>
                                                        <th><center>Category</center></th>
                                                        <th><center>Item Name</center></th>
                                                        <th><center>Item Code</center></th>
                                                        <th><center>Specification</center></th>
                                                        <th><center>PR Qty</center></th>
                                                        <th><center>Unit</center></th>
                                                        <th><center>Price</center></th>
                             ");
                WriteLiteral(@"                           <th><center>Vat Rate</center></th>
                                                        <th><center>Total</center></th>
                                                    </tr>
                                                </table>

                                            </div>

                                        </fieldset>
                                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(33722, 880, true);
            WriteLiteral(@"
                                </div>
                            </div>
                        </div>
                    </div>
                    <!--//agileinfo-grap-->

                </div>
            </div>
        </div>

        <div class=""row"">
            <div class=""panel-body"">
                <div class=""col-md-12 w3ls-graph"">
                    <!--agileinfo-grap-->
                    <div class=""agileinfo-grap"">
                        <div class=""agileits-box"">
                            <header class=""agileits-box-header clearfix"">
                                <div class=""toolbar"">

                                </div>
                            </header>
                            <div class=""agileits-box-body clearfix"">
                                <div id=""hero-area"">
                                    ");
            EndContext();
            BeginContext(34602, 2306, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "2abbfcb08b294d94b3f5b16704a49bff", async() => {
                BeginContext(34608, 2293, true);
                WriteLiteral(@"
                                        <fieldset>
                                            <table>

                                                <tr>
                                                    <td width=""40"">
                                                        <b>Sub-Total:</b>
                                                    </td>
                                                    <td>
                                                        <input type=""text"" id=""subTotalTxtField"" readonly=""readonly"" />
                                                    </td>
                                                </tr>

                                                <tr>
                                                    <td width=""40"">
                                                        <b>Vat:</b>
                                                    </td>
                                                    <td>
                                                      ");
                WriteLiteral(@"  <input type=""text"" id=""vatTxtField"" readonly=""readonly"" />
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td width=""40"">
                                                        <b>Grand-Total:</b>
                                                    </td>
                                                    <td>
                                                        <input type=""text"" id=""grandTotalTxtField"" readonly=""readonly"" />
                                                    </td>
                                                </tr>
                                                <tr>
                                                    <td>
                                                        <button type=""button"" id=""addBtn"" class=""btn-add"" onclick=""SubmitBtnClick()"" style=""width:100px"">Submit</button>
            ");
                WriteLiteral("                                        </td>\r\n                                                </tr>\r\n                                            </table>\r\n                                        </fieldset>\r\n                                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(36908, 663, true);
            WriteLiteral(@"

                                </div>
                            </div>
                        </div>
                    </div>
                    <!--//agileinfo-grap-->

                </div>
            </div>
        </div>
    </div>
</div>

<div id=""ModalView"" class=""modal"">

    <!-- Modal content -->
    <div class=""modal-content"">
        <div class=""modal-header"">

            <span class=""close"">×</span>
        </div>
        <div class=""modal-body"">
            <div class=""modal-body"">
                <div id=""DivNew"">



                </div>

            </div>
        </div>

    </div>

</div>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
