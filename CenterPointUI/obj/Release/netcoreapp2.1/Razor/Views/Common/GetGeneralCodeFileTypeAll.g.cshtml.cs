#pragma checksum "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\Common\GetGeneralCodeFileTypeAll.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "37a5a3e9da35c942259d9033679dba3627f870ab"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Common_GetGeneralCodeFileTypeAll), @"mvc.1.0.view", @"/Views/Common/GetGeneralCodeFileTypeAll.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Common/GetGeneralCodeFileTypeAll.cshtml", typeof(AspNetCore.Views_Common_GetGeneralCodeFileTypeAll))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\_ViewImports.cshtml"
using CenterPointUI;

#line default
#line hidden
#line 2 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\_ViewImports.cshtml"
using CenterPointUI.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"37a5a3e9da35c942259d9033679dba3627f870ab", @"/Views/Common/GetGeneralCodeFileTypeAll.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2edc7cc0f3e77f68ee09f57f8aa10aed8980b104", @"/Views/_ViewImports.cshtml")]
    public class Views_Common_GetGeneralCodeFileTypeAll : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/jquery-2.1.3.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/jquery.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/Scripts/moment.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 2 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\Common\GetGeneralCodeFileTypeAll.cshtml"
  
    ViewData["Title"] = "GetGeneralCodeFileTypeAll";

#line default
#line hidden
            BeginContext(63, 97, true);
            WriteLiteral("\r\n<script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.7.1.min.js\"></script>\r\n\r\n\r\n");
            EndContext();
            BeginContext(160, 53, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "747c8474859b48d094deed2c501601be", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(213, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(215, 47, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "74e6c764f0604008958a96d799c66294", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(262, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(266, 43, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "35585423658a470aa5b9b31f5e924d52", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(309, 4, true);
            WriteLiteral("\r\n\r\n");
            EndContext();
            BeginContext(832, 35103, true);
            WriteLiteral(@"
<link rel=""stylesheet"" type=""text/css"" href=""https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css""/>

<script type=""text/javascript"">

    var server = ""http://192.168.20.152"";
    var requestUrl;

    var objlistGeneralCodeFileType;
    var vArray = new Array();

    var objlistGeneralCodeFileByFileType;
    var objGeneralCodeFileLevelByFileType;
    var objGeneralCodeFileType;
    var today;
    //var company_Code = 1;
    var levelScreenHeading;
    var selectedFileTypeName;

    var selectedFileTypeCode;
    var selectedParentItem;

    var pUserCode = """";
    var pCompanyCode = 1;


    var objByKey = {
        ""tableName_TBL"": """",
        ""fileTypeCode_PK"": """",
        ""fileTypeName"": """",
        ""moduleCode"": """",
        ""isHidden"": """",
        ""countLevel_VW"": """",
        ""errorMessage_VW"": """",
        ""isNew"": """",
        ""isDeleted"": """",
        ""userCode"": """",
        ""actionType"": """",
        ""actionDate"": """",
        ""companyCo");
            WriteLiteral(@"de_FK"": """",
        ""isDirty"": """"
    }

    window.onload = function () {
        CheckUserIsLogedIn();
    }

    function CheckUserIsLogedIn() {
        debugger
        GetCookie();

        if (pUserCode != ""NotLogedIn"") {
            GetGeneralCodeFileTypeAll();
            HideGeneralCodeFileByFileType();
            ModuleDropDownList();
            getCurrentDate();
        }
        else {
            requestUrl = server + ""/centerpoint/Common/GetGeneralCodeFileTypeAll"";
            Cookies.set('RequestURL', requestUrl, { expires: 1 });
            window.location.href = ""../Login/LoginPageUI"";
        }
    }

    function GetCookie() {
        debugger
        pUserCode = Cookies.get('UserID');

        if (pUserCode == null || pUserCode == """") {
            // do cookie doesn't exist stuff;
            pUserCode = ""NotLogedIn"";
        }
        else {
            // do cookie exists stuff
            pUserCode = Cookies.get('UserID');
        }
    }

    f");
            WriteLiteral(@"unction getCurrentDate() {
        today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd
        }

        if (mm < 10) {
            mm = '0' + mm
        }

        today = yyyy + '-' + mm + '-' + dd;
        //console.log(today);
        //document.getElementById(""requistionActionDate"").value = today;
    }

    function ModuleDropDownList(){

        debugger
        $.ajax({
            url: server + ""/CoreCommon/api/Common/GetModuleList"",
            type: ""Get"",
            datatype: ""JSON"",
            contentType: ""application/json"",
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {

                for (var i = 0; i < data.listGeneralModuleList.length; i++) {

                    $(""#moduleDropDownList"").g");
            WriteLiteral(@"et(0).options[i] = new Option(data.listGeneralModuleList[i].textValue, data.listGeneralModuleList[i].dataValue, i);
                    $(""#levelmoduleDropDownList"").get(0).options[i] = new Option(data.listGeneralModuleList[i].textValue, data.listGeneralModuleList[i].dataValue, i);

                }

            },
            error: function () {
                alert(""Failed to load Module"");

            }
        });
    }

    function GetGeneralCodeFileTypeAll() {
        debugger


        $.ajax({

            url: server + ""/CoreCommon/api/Common/GetGeneralCodeFileTypeAll?pModuleCode=2&COMPANY_CODE="" + pCompanyCode,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {

                objlistGeneralCodeFileType = data");
            WriteLiteral(@".listGeneralCodeFileType;

                LoadRequisitionData(objlistGeneralCodeFileType);
            },
            error: function () {
                alert(""Failed to Code File Type Data"");

            }
        });

    }

    function LoadRequisitionData(ObjList) {
        debugger
        for (var i = 0; i < ObjList.length; i++) {
            var jObjlistGeneralCodeFileType = {
                ""tableName_TBL"": """",
                ""fileTypeCode_PK"": """",
                ""fileTypeName"": """",
                ""moduleCode"": """",
                ""isHidden"": """",
                ""countLevel_VW"": """",
                ""errorMessage_VW"": """",
                ""isNew"": """",
                ""isDeleted"": """",
                ""userCode"": """",
                ""actionType"": """",
                ""actionDate"": """",
                ""companyCode_FK"": """",
                ""isDirty"": """"
            }
            debugger
            var index = $(""#tblCodeFileTypeAll"").children(""tr"").length;

       ");
            WriteLiteral(@"     jObjlistGeneralCodeFileType.tableName_TBL = ObjList[i].tableName_TBL;
            jObjlistGeneralCodeFileType.fileTypeCode_PK = ObjList[i].fileTypeCode_PK;
            jObjlistGeneralCodeFileType.fileTypeName = ObjList[i].fileTypeName;
            jObjlistGeneralCodeFileType.moduleCode = ObjList[i].moduleCode;
            jObjlistGeneralCodeFileType.isHidden = ObjList[i].isHidden;
            jObjlistGeneralCodeFileType.countLevel_VW = ObjList[i].countLevel_VW;
            jObjlistGeneralCodeFileType.errorMessage_VW = ObjList[i].errorMessage_VW;
            jObjlistGeneralCodeFileType.isNew = ObjList[i].isNew;
            jObjlistGeneralCodeFileType.isDeleted = ObjList[i].isDeleted;
            jObjlistGeneralCodeFileType.userCode = ObjList[i].userCode;
            jObjlistGeneralCodeFileType.actionType = ObjList[i].actionType;
            jObjlistGeneralCodeFileType.actionDate = ObjList[i].actionDate;
            jObjlistGeneralCodeFileType.companyCode_FK = ObjList[i].companyCode_FK;
      ");
            WriteLiteral(@"      jObjlistGeneralCodeFileType.isDirty = ObjList[i].isDirty;

            AddDocuments(jObjlistGeneralCodeFileType.fileTypeCode_PK, jObjlistGeneralCodeFileType.companyCode_FK, jObjlistGeneralCodeFileType.fileTypeName);
        }
    }



    function backPage() {

        window.location.href = ""../Home/Index"";
    }
    

    function AddDocuments(index, pTcValue, pTcType) {
        debugger
        var SLno = index;
        var indexCell = ""<td style='display:none'><input type='hidden' name='Documents.Index'  value='"" +
            index +
            ""' /></td>"";
        
        var SLCell = ""<td><input type='hidden'  id='Documents"" +
            index +
            ""_slNo' name='Documents["" +
            index +
            ""].slNo' value='"" +
            SLno +
            ""' />"" +
            SLno +
            ""</td>"";
        var addLevelCell =
            ""<td><input  id='btnAddChild'  class='btn btn-primary' type='button' value='+'  onclick='EditCodeFileLevel("" +
");
            WriteLiteral(@"            index +
            "","" +
            pTcValue +
            "",\"""" +
            pTcType +
            ""\"");' /></td>"";
        var TcTypeCell = ""<td><input type='hidden'   id='Documents"" +
            index +
            ""_pTcType' name='Documents["" +
            index +
            ""].pTcType' value='"" +
            pTcType +
            ""' />"" +
            pTcType +
            ""</td>"";

        var editCell =
            ""<td><input  id='btnEditType'  class='btn btn-success' type='button' value='Edit'  onclick='EditCodeFile("" +
            index +
            "","" +
            pTcValue +
            "",\"""" +
            pTcType +
            ""\"");' /></td>"";

        var newRow = ""<tr id='tblDocuments"" +
            index +
            ""'>"" +
            indexCell +
            addLevelCell+
            SLCell +
            TcTypeCell +
            editCell +
            ""</tr>"";

        $(""#tblCodeFileTypeAll"").append(newRow);
        vArray.push({ Documen");
            WriteLiteral(@"tName: pTcType });

    }

    function HideGeneralCodeFileByFileType() {
        ModuleDropDownList();

        var y = document.getElementById(""GeneralCodeFileByFileType"");
        y.style.display = ""none"";

        //if (y.style.display === ""none"") {
        //    y.style.display = ""block"";
        //} else {
        //    y.style.display = ""none"";
        //}

        var z = document.getElementById(""GeneralCodeFileLevelByFileType"");
        z.style.display = ""none"";
        //if (z.style.display === ""none"") {
        //    z.style.display = ""block"";
        //} else {
        //    z.style.display = ""none"";
        //}
        
        var x = document.getElementById(""MainCodeFile"");
        x.style.display = ""block"";
        //if (x.style.display === ""block"") {
        //    x.style.display = ""none"";
        //} else {
        //    x.style.display = ""block"";
        //}
    }
    
    function EditCodeFile(fileTypeCode, companyCode, fileName) {
        debugger

    ");
            WriteLiteral(@"    selectedFileTypeCode = fileTypeCode;
        selectedFileTypeName = fileName;

        $(""#tblCodeFileLevelByFileType tr"").remove();
        $(""#tblCodeFileByFileType tr"").remove();
        vArray = [];

        //Hide the Code File Screen
        var x = document.getElementById(""MainCodeFile"");
        x.style.display = ""none"";
        //if (x.style.display === ""none"") {
        //    x.style.display = ""block"";
        //} else {
        //    x.style.display = ""none"";
        //}

        //Hide the Code File Level Screen
        var z = document.getElementById(""GeneralCodeFileLevelByFileType"");
        z.style.display = ""none"";
        //if (z.style.display === ""none"") {
        //    z.style.display = ""block"";
        //} else {
        //    z.style.display = ""none"";
        //}

        //Show the Code File Type Screen
        var y = document.getElementById(""GeneralCodeFileByFileType"");
        y.style.display = ""block"";
        //if (y.style.display === ""block"") {
    ");
            WriteLiteral(@"    //    y.style.display = ""none"";
        //} else {
        //    y.style.display = ""block"";
        //}

        

        document.getElementById(""Caption"").innerHTML = fileName;
        getGeneralCodeFileByFileType(fileTypeCode, companyCode);

    }

    function EditCodeFileLevel(fileTypeCode, companyCode, fileName) {
        debugger
        $(""#tblCodeFileLevelByFileType tr"").remove();
        $(""#tblCodeFileByFileType tr"").remove();
        vArray = [];

        levelScreenHeading = fileName;

        var x = document.getElementById(""MainCodeFile"");
        x.style.display = ""none"";
        //if (x.style.display === ""none"") {
        //    x.style.display = ""block"";
        //} else {
        //    x.style.display = ""none"";
        //}

        var y = document.getElementById(""GeneralCodeFileByFileType"");
        y.style.display = ""none"";
        //if (y.style.display === ""none"") {
        //    y.style.display = ""block"";
        //} else {
        //    y.style.disp");
            WriteLiteral(@"lay = ""block"";
        //}

        var z = document.getElementById(""GeneralCodeFileLevelByFileType"");
        z.style.display = ""block"";
        //if (z.style.display === ""block"") {
        //    z.style.display = ""none"";
        //} else {
        //    z.style.display = ""block"";
        //}

        //document.getElementById(""Caption"").innerHTML = fileName;
        GetGeneralCodeFileTypeByKey(fileTypeCode, companyCode);
        getGeneralCodeFileLevelByFileType(fileTypeCode, companyCode);
    }

    function getGeneralCodeFileByFileType(fileTypeCode, companyCode) {
        debugger
        $.ajax({

            url: server + ""/CoreCommon/api/Common/GetGeneralCodeFileByFileType?FileTypeCode="" + fileTypeCode + ""&pCompanyCode="" + companyCode,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error o");
            WriteLiteral(@"ccurred."");
            },
            success: function (data) {
                debugger
                objlistGeneralCodeFileByFileType = data.listGeneralCodeFileByFileType;
                LoadGeneralCodeFileByFileTypeData(objlistGeneralCodeFileByFileType);
                //LoadRequisitionData(objlistGeneralCodeFileType);
            },
            error: function () {
                alert(""Failed to Code File Type Data"");

            }
        });
    }

    function GetGeneralCodeFileTypeByKey(fileTypeCode, companyCode) {
        debugger
        $.ajax({

            url: server + ""/CoreCommon/api/Common/GetGeneralCodeFileTypeByKey?FileTypeCode="" + fileTypeCode + ""&COMPANY_CODE="" + companyCode,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
          ");
            WriteLiteral(@"  success: function (data) {
                debugger
                objGeneralCodeFileType = data.objGeneralCodeFileType;

                
                objByKey.tableName_TBL = objGeneralCodeFileType.tableName_TBL;
                objByKey.fileTypeCode_PK = objGeneralCodeFileType.fileTypeCode_PK;
                objByKey.fileTypeName = objGeneralCodeFileType.fileTypeName;
                objByKey.moduleCode = objGeneralCodeFileType.moduleCode;
                objByKey.isHidden = objGeneralCodeFileType.isHidden;;
                objByKey.countLevel_VW = objGeneralCodeFileType.countLevel_VW;
                objByKey.errorMessage_VW = objGeneralCodeFileType.errorMessage_VW;
                objByKey.isNew = objGeneralCodeFileType.tablisNeweName_TBL;
                objByKey.isDeleted = objGeneralCodeFileType.isDeleted;
                objByKey.userCode = objGeneralCodeFileType.userCode;
                objByKey.actionType = objGeneralCodeFileType.actionType;
                objByKey.actionDa");
            WriteLiteral(@"te = objGeneralCodeFileType.actionDate;
                objByKey.companyCode_FK = objGeneralCodeFileType.companyCode_FK;
                objByKey.isDirty = objGeneralCodeFileType.isDirty;

                

                AssignCodeFileByKeyData(objGeneralCodeFileType);
            },
            error: function () {
                alert(""Failed to Code File Type Data"");

            }
        });
    }

    

    function AssignCodeFileByKeyData(objAssign) {
        document.getElementById(""levelFileTypeCodeTxtField"").value = objAssign.fileTypeCode_PK;
        document.getElementById(""levelFileTypeNameTxtField"").value = objAssign.fileTypeName;
        
        //set the C# coded drop down selected value
        $(""#levelmoduleDropDownList"").val(objAssign.moduleCode).change();

        var isHidden = objAssign.isHidden;
        //var isChecked = $(""#isHiddenCheckBox"").prop(""checked"");
        if (isHidden) {
            $(""#isHiddenCheckBox"").prop(""checked"");
        }

    }
");
            WriteLiteral(@"
    function getGeneralCodeFileLevelByFileType(fileTypeCode, companyCode) {
        debugger
        $.ajax({

            url: server + ""/CoreCommon/api/Common/GetGeneralCodeFileLevelByFileType?fileTypeCode_PK="" + fileTypeCode + ""&companyCode_PK="" + companyCode,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {
                debugger
                objlistGeneralCodeFileLevelByFileType = data.listGeneralCodeFileLevelByFileType;

                debugger
                AssignValueToPopUp(objlistGeneralCodeFileLevelByFileType);

                LoadGeneralCodeFileLevelByFileTypeData(objlistGeneralCodeFileLevelByFileType);
                //LoadRequisitionData(objlistGeneralCodeFileType);
            },
            error: funct");
            WriteLiteral(@"ion () {
                alert(""Failed to Code File Type Data"");

            }
        });
    }


    function AssignValueToPopUp(objAssignToPopUp) {
        debugger
        
        document.getElementById(""parentLevelPopUpScreenHeading"").innerHTML = selectedFileTypeName;
        
        $(""#parentLevel li"").remove();

        for (var i = 0; i < objAssignToPopUp.length; i++) {
            var anchor = document.createElement(""a"");
            anchor.href = ""javascript:LoadData('"" + objAssignToPopUp[i].levelCode_PK + ""','"" + objAssignToPopUp[i].levelName+""')"";
            anchor.onclick = ""LoadData('"" + objAssignToPopUp[i].levelCode_PK + ""')"";
            anchor.id = objAssignToPopUp[i].levelCode_PK;
            anchor.innerText = objAssignToPopUp[i].levelName;

            var elem = document.createElement(""li"");
            elem.appendChild(anchor);
            document.getElementById(""parentLevel"").appendChild(elem);

            

            //$('body').append(str);
     ");
            WriteLiteral(@"   }
    }

    function LoadData(levelCode, levelName) {
        debugger
        var LevelCode = levelCode;
        selectedParentItem = levelName;
        GetGeneralCodeFileByFileTypeNFileLevel(selectedFileTypeCode, LevelCode, pCompanyCode);
    }

    function GetGeneralCodeFileByFileTypeNFileLevel(selectedFileTypeCode, levelCode, pCompanyCode) {
        debugger
        $.ajax({

            url: server + ""/CoreCommon/api/Common/GetCodeFile?FileTypeCode="" + selectedFileTypeCode + ""&LevelCode="" + levelCode + ""&COMPANY_CODE="" + pCompanyCode,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {
                debugger
                objListGeneralCodeFile = data.listGeneralCodeFile;
                AssignSelectedLevelData(objLi");
            WriteLiteral(@"stGeneralCodeFile);
            },
            error: function () {
                alert(""Failed to Code File Type Data"");

            }
        });
    }

    function AssignSelectedLevelData(objLevelData) {
        document.getElementById(""parentLevelTxtField"").value = selectedFileTypeName;
        document.getElementById(""parentItemTxtField"").value = selectedParentItem;
        $(""#tblCodeFileByFileType tr"").remove();
        $('#parentLevelPopUpModel').modal('hide')
        LoadGeneralCodeFileByFileTypeData(objLevelData);
    }

    function LoadGeneralCodeFileByFileTypeData(objData) {
        debugger
        for (var i = 0; i < objData.length; i++) {
            var jObjFileType = {
                ""tableName_TBL"": """",
                ""sortOrder"": """",
                ""fileName"": """",
                ""fileShortName"": """",
                ""fileCode_PK"": """",
                ""fileId"": """",
                ""isActiveCodeFile"": """",
                ""moduleCode"": """",
                """);
            WriteLiteral(@"isReadOnly"": """",
                ""levelCode"": """",
                ""fileTypeCode_FK"": """",
                ""parentFileCode"": """",
                ""fileTypeCode"": """",
                ""levelName"": """",
                ""isNew"": """",
                ""isDeleted"": """",
                ""userCode"": """",
                ""actionType"": """",
                ""actionDate"": """",
                ""companyCode_FK"": """",
                ""isDirty"": """"
            }
            debugger
            var index = $(""#tblCodeFileByFileTypeA"").children(""tr"").length;

            jObjFileType.tableName_TBL = objData[i].tableName_TBL;
            jObjFileType.sortOrder = objData[i].sortOrder;
            jObjFileType.fileName = objData[i].fileName;
            jObjFileType.fileShortName = objData[i].fileShortName;
            jObjFileType.fileCode_PK = objData[i].fileCode_PK;
            jObjFileType.fileId = objData[i].fileId;
            jObjFileType.isActiveCodeFile = objData[i].isActiveCodeFile;
            jObjFileTyp");
            WriteLiteral(@"e.moduleCode = objData[i].moduleCode;
            jObjFileType.isReadOnly = objData[i].isReadOnly;
            jObjFileType.levelCode = objData[i].levelCode;
            jObjFileType.fileTypeCode_FK = objData[i].fileTypeCode_FK;
            jObjFileType.parentFileCode = objData[i].parentFileCode;
            jObjFileType.fileTypeCode = objData[i].fileTypeCode;
            jObjFileType.levelName = objData[i].levelName;
            jObjFileType.isNew = objData[i].isNew;
            jObjFileType.isDeleted = objData[i].isDeleted;
            jObjFileType.userCode = objData[i].userCode;
            jObjFileType.actionType = objData[i].actionType;
            jObjFileType.actionDate = objData[i].actionDate;
            jObjFileType.companyCode_FK = objData[i].companyCode_FK;
            jObjFileType.isDirty = objData[i].isDirty;

            //company_Code = objData[i].companyCode_FK;

            AddFileByFileTypeToDocuments(jObjFileType.fileCode_PK, jObjFileType.fileName, jObjFileType.fileShortNa");
            WriteLiteral(@"me, jObjFileType.sortOrder);
        }
    }

    function LoadGeneralCodeFileLevelByFileTypeData(objData) {
        debugger
        for (var i = 0; i < objData.length; i++) {
            var jObjLevelFileType = {
                ""tableNm_TBL"": null,
                ""levelCode_PK"": 3,
                ""levelId"": ""1"",
                ""levelName"": ""Blood group"",
                ""fileTypeCode"": 3,
                ""fileIdStartFrom"": """",
                ""moduleCode"": ""2"",
                ""isNew"": true,
                ""isDeleted"": false,
                ""userCode"": """",
                ""actionType"": ""Insert"",
                ""actionDate"": null,
                ""companyCode_FK"": 1,
                ""isDirty"": false
            }
            debugger
            var index = $(""#tblCodeFileLevelByFileTypeA"").children(""tr"").length;

            jObjLevelFileType.tableNm_TBL = objData[i].tableNm_TBL;
            jObjLevelFileType.levelCode_PK = objData[i].levelCode_PK;
            jObjLevelFileType.levelId");
            WriteLiteral(@" = objData[i].levelId;
            jObjLevelFileType.levelName = objData[i].levelName;
            jObjLevelFileType.fileTypeCode = objData[i].fileTypeCode;
            jObjLevelFileType.fileIdStartFrom = objData[i].fileIdStartFrom;
            jObjLevelFileType.moduleCode = objData[i].moduleCode;
            jObjLevelFileType.isNew = objData[i].isNew;
            jObjLevelFileType.isDeleted = objData[i].isDeleted;
            jObjLevelFileType.userCode = objData[i].userCode;
            jObjLevelFileType.actionType = objData[i].actionType;
            jObjLevelFileType.actionDate = objData[i].actionDate;
            jObjLevelFileType.companyCode_FK = objData[i].companyCode_FK;
            jObjLevelFileType.isDirty = objData[i].isDirty;
            

            //company_Code = objData[i].companyCode_FK;

            AddFileLevelByFileTypeToDocuments(jObjLevelFileType.levelId, jObjLevelFileType.levelName, jObjLevelFileType.companyCode_FK);
        }
    }

    function AddFileByFileTypeTo");
            WriteLiteral(@"Documents(code, fileName, fileShortName, fileSortOrder) {
        debugger
        var SLno = code;
        var indexCell = ""<td style='display:none'><input type='hidden' name='Documents.Index'  value='"" +
            code +
            ""' /></td>"";

        var SLCell = ""<td><input type='hidden'  id='Documents"" +
            code +
            ""_slNo' name='Documents["" +
            code +
            ""].slNo' value='"" +
            SLno +
            ""' />"" +
            SLno +
            ""</td>"";
        var fileNameCell = ""<td><input type='hidden'   id='Documents"" +
            code +
            ""_pTcType' name='Documents["" +
            code +
            ""].pTcType' value='"" +
            fileName +
            ""' />"" +
            fileName +
            ""</td>"";

        var fileShortNameCell = ""<td><input type='hidden'  id='Documents"" +
            code +
            ""_pDescription' name='Documents["" +
            code +
            ""].pDescription' value='"" +
        ");
            WriteLiteral(@"    fileShortName +
            ""' />"" +
            fileShortName +
            ""</td>"";

        var fileSortOrderCell = ""<td><input type='hidden'  id='Documents"" +
            code +
            ""_pDescription' name='Documents["" +
            code +
            ""].pDescription' value='"" +
            fileSortOrder +
            ""' />"" +
            fileSortOrder +
            ""</td>"";
        var newRow = ""<tr id='tblDocuments"" +
            code +
            ""'>"" +
            indexCell +
            SLCell +
            fileNameCell +
            fileShortNameCell +
            fileSortOrderCell +
            ""</tr>"";

        $(""#tblCodeFileByFileType"").append(newRow);
        vArray.push({ DocumentName: indexCell });
    }

    function AddFileLevelByFileTypeToDocuments(levelId, levelName, companyCode) {
        debugger
        var SLno = levelId;
        var indexCell = ""<td style='display:none'><input type='hidden' name='Documents.Index'  value='"" +
            level");
            WriteLiteral(@"Id +
            ""' /></td>"";

        var SLCell = ""<td><input type='hidden'  id='Documents"" +
            levelId +
            ""_slNo' name='Documents["" +
            levelId +
            ""].slNo' value='"" +
            SLno +
            ""' />"" +
            SLno +
            ""</td>"";
        var levelNameCell = ""<td><input type='hidden'   id='Documents"" +
            levelId +
            ""_pTcType' name='Documents["" +
            levelId +
            ""].pTcType' value='"" +
            levelName +
            ""' />"" +
            levelName +
            ""</td>"";

        var companyCodeCell = ""<td><input type='hidden'  id='Documents"" +
            levelId +
            ""_pDescription' name='Documents["" +
            levelId +
            ""].pDescription' value='"" +
            companyCode +
            ""' />"" +
            companyCode +
            ""</td>"";
       
        var newRow = ""<tr id='tblDocuments"" +
            levelId +
            ""'>"" +
            inde");
            WriteLiteral(@"xCell +
            SLCell +
            levelNameCell +
            companyCodeCell +
            ""</tr>"";

        $(""#tblCodeFileLevelByFileType"").append(newRow);
        vArray.push({ DocumentName: indexCell });
    }

    

    function CreateNewFileType() {
        debugger
        var objMain = {
            ""tableName_TBL"": null,
            ""fileTypeCode_PK"": 230,
            ""fileTypeName"": ""Testing"",
            ""moduleCode"": ""2"",
            ""isHidden"": false,
            ""countLevel_VW"": 1,
            ""errorMessage_VW"": 0,
            ""isNew"": true,
            ""isDeleted"": false,
            ""userCode"": """",
            ""actionType"": ""INSERT"",
            ""actionDate"": ""2019-03-20"",
            ""companyCode_FK"": 1,
            ""isDirty"": false
        }

        objMain.tableName_TBL = """";
        objMain.fileTypeCode_PK = $(""#fileTypeCodeTxtField"").val();
        objMain.fileTypeName = $(""#fileTypeNameTxtField"").val();
        objMain.moduleCode = parseInt($(""#");
            WriteLiteral(@"moduleDropDownList option:selected"").val(), 10);

        var isHidden = false;
        var isChecked = $(""#isHiddenCheckBox"").prop(""checked"");
        if (isChecked) {
            isHidden = true;
        }
        else {
            isHidden = false;
        }

        objMain.isHidden = isHidden;
        objMain.countLevel_VW = 1;
        objMain.isNew = true;
        objMain.isDeleted = false;
        objMain.userCode = pUserCode;
        objMain.actionType = ""INSERT"";
        objMain.actionDate = today;
        objMain.companyCode_FK = pCompanyCode;
        objMain.isDirty = false;


        debugger

        var datas = JSON.stringify(objMain);

        $.ajax(
            {
                url: server + ""/CoreCommon/api/Common/CreateGeneralCodeFileType"",
                dataType: ""json"",
                processData: false,
                contentType: 'application/json',
                type: ""POST"",
                data: datas,
                success: function (data)");
            WriteLiteral(@" {
                    //document.location.reload();
                    $('#mymodel').modal('hide');
                    $('#levelCreateModel').modal('show'); 


                    alert(""Save Succesfull!"");
                    //ShowLevelScreen()
                },
                error: function () {
                    alert(""There was error saving data!"");
                }
            }
        );

    }

    //function ShowLevelScreen() {
    //    var x = document.getElementById(""GeneralCodeFileLevelByFileType"");
    //    x.style.display = ""block"";

    //    var y = document.getElementById(""GeneralCodeFileLevelByFileType"");
    //    x.style.display = ""block"";
    //}

    function UpdateFileType() {
        debugger
        var objUpdateMain = {
            ""tableName_TBL"": """",
            ""fileTypeCode_PK"": """",
            ""fileTypeName"": """",
            ""moduleCode"": """",
            ""isHidden"": """",
            ""countLevel_VW"": """",
            ""errorMessage_VW"": ");
            WriteLiteral(@""""",
            ""isNew"": """",
            ""isDeleted"": """",
            ""userCode"": """",
            ""actionType"": """",
            ""actionDate"": """",
            ""companyCode_FK"": """",
            ""isDirty"": """"
        }

        if (objByKey.tableName_TBL != """") {
            objUpdateMain.tableName_TBL = objByKey.tableName_TBL;
            objUpdateMain.fileTypeCode_PK = $(""#levelFileTypeCodeTxtField"").val();
            var fileTypeCode = $(""#levelFileTypeCodeTxtField"").val();
            var fileTypeCodeDb = objByKey.fileTypeCode_PK;
            objUpdateMain.fileTypeName = $(""#levelFileTypeNameTxtField"").val();
            objUpdateMain.moduleCode = parseInt($(""#levelmoduleDropDownList option:selected"").val(), 10);

            var isHidden = false;
            var isChecked = $(""#levelIsHiddenCheckBox"").prop(""checked"");
            if (isChecked) {
                isHidden = true;
            }
            else {
                isHidden = false;
            }

            objUpdat");
            WriteLiteral(@"eMain.isHidden = isHidden;
            objUpdateMain.countLevel_VW = objByKey.countLevel_VW;
            objUpdateMain.errorMessage_VW = objByKey.errorMessage_VW;

            //if (fileTypeCode != fileTypeCodeDb) {
            //    objUpdateMain.isNew = true;
            //}
            //else {
            //    objUpdateMain.isNew = false;
            //}
            //if (objMain.fileTypeCode_PK != """") {
            //    objMain.isNew = false;
            //}
            //else {
            //    objMain.isNew = objByKey.isNew;
            //}
            //objMain.isNew = true;
            objUpdateMain.isNew = false;
            objUpdateMain.isDeleted = objByKey.isDeleted;
            objUpdateMain.userCode = objByKey.userCode;
            objUpdateMain.actionType = ""update"";
            objUpdateMain.actionDate = today
            objUpdateMain.companyCode_FK = objByKey.companyCode_FK;
            objUpdateMain.isDirty = objByKey.isDirty;


            debugger

        ");
            WriteLiteral(@"    var datas = JSON.stringify(objUpdateMain);

            $.ajax(
                {
                    url: server + ""/CoreCommon/api/Common/CreateGeneralCodeFileType"",
                    dataType: ""json"",
                    processData: false,
                    contentType: 'application/json',
                    type: ""POST"",
                    data: datas,
                    success: function (data) {
                        document.location.reload();
                        alert(""Save Succesfull!"");
                    },
                    error: function () {
                        alert(""File Type Code is duplicate!"");
                    }
                }
            );
        }
    }

    function CreateNewFileLevel() {
        var objLevel = {
            ""tableNm_TBL"": """",
            ""levelCode_PK"": """",
            ""levelId"": """",
            ""levelName"": """",
            ""fileTypeCode"": """",
            ""fileIdStartFrom"": """",
            ""moduleCode"": """",
    ");
            WriteLiteral(@"        ""isDeleted"": """",
            ""userCode"": """",
            ""actionType"": """",
            ""actionDate"": """",
            ""companyCode_FK"": """",
            ""isDirty"": """"
        }

        objLevel.tableNm_TBL = """";
        objLevel.levelCode_PK = 0;
        objLevel.levelId = $(""#levelModelLevelCodeTxtField"").val();
        objLevel.levelName = $(""#levelModelLevelNameTxtField"").val();
        objLevel.fileTypeCode = $(""#levelFileTypeCodeTxtField"").val();
        objLevel.fileIdStartFrom = $(""#levelModelFileCodeStartFromTxtField"").val();
        objLevel.moduleCode = parseInt($(""#levelmoduleDropDownList option:selected"").val(), 10);
        objLevel.isDeleted = false;
        objLevel.userCode = pUserCode;
        objLevel.actionType = ""insert"";
        objLevel.actionDate = today;
        objLevel.companyCode_FK = 1;
        objLevel.isDirty = false;

        var fileName = ""none"";

        debugger

        var datas = JSON.stringify(objLevel);

        $.ajax(
            {
    ");
            WriteLiteral(@"            url: server + ""/CoreCommon/api/Common/SaveGeneralCodeFileLevel"",
                dataType: ""json"",
                processData: false,
                contentType: 'application/json',
                type: ""POST"",
                data: datas,
                success: function (data) {
                    //document.location.reload();
                    $('#levelCreateModel').modal('hide');
                    //$('#levelCreateModel').modal('dispose');

                    EditCodeFileLevel(objLevel.fileTypeCode, objLevel.companyCode_FK, fileName);

                    alert(""Save Succesfull!"");
                },
                error: function (data) {
                    alert(data.message);
                }
            }
        );
    }

    function LevelScreenNewBtnClick() {
        document.getElementById(""createLevelScreenHeading"").innerHTML = ""Create File Level(""+levelScreenHeading+"")"";
    }

    function CancelButtonClick() {
        document.location.reload");
            WriteLiteral(@"();
    }

    function NewBtnClick() {
        document.location.reload();
    }

    function NewLevelChildBtnClick() {

    }


</script>


<meta name=""viewport"" content=""width=device-width, initial-scale=1"">
<div class=""body-content"">
    <div class=""box"">
        ");
            EndContext();
            BeginContext(35935, 5949, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8dbe424f2ace433eb853cbda1c56c933", async() => {
                BeginContext(35941, 4453, true);
                WriteLiteral(@"
            <div id=""MainCodeFile"">
                <fieldset>
                    <legend style=""color:brown"">Code File</legend>

                    <table class=""table-hover"">
                        <thead>
                            <tr>
                                <th>Add Level</th>
                                <th>Code</th>
                                <th>Name</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody id=""tblCodeFileTypeAll""></tbody>
                    </table>

                </fieldset>
                <br />
                <button type=""button"" class=""btn btn-success"" data-target=""#mymodel"" data-toggle=""modal"">New</button>
            </div>



            <div id=""GeneralCodeFileByFileType"">
                <fieldset>
                    <legend style=""color:brown"" id=""Caption"">Code File By File Type</legend>

                    <div class=""row"">");
                WriteLiteral(@"
                        <div class=""col-10"">
                            <label for=""fname"">Parent Level:</label>
                        </div>
                        <div class=""col-23"">
                            <input type=""text"" id=""parentLevelTxtField"" placeholder=""Tap twice"" data-target=""#parentLevelPopUpModel"" data-toggle=""modal"" onclick=""getGeneralCodeFileLevelByFileType('' + selectedFileTypeCode + '', '' + pCompanyCode + '')""/>
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-10"">
                            <label for=""fname"">Parent Item:</label>
                        </div>
                        <div class=""col-23"">
                            <input type=""text"" id=""parentItemTxtField"" readonly=""readonly"" />
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-10"">
                            <label for=""f");
                WriteLiteral(@"name"">Level:</label>
                        </div>
                        <div class=""col-23"">
                            <input type=""text"" id=""levelTxtField"" readonly=""readonly"" />
                        </div>
                    </div>

                    <div class=""row"">
                        <table class=""table-hover"">
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>File Name</th>
                                    <th>File Short Name</th>
                                    <th>File Sort Order</th>
                                </tr>
                            </thead>
                            <tbody id=""tblCodeFileByFileType""></tbody>
                        </table>
                    </div>
                    <button type=""button"" class=""btn btn-success"" onclick=""NewLevelChildBtnClick()"">Add New Item</button>
                    <button type=""button");
                WriteLiteral(@""" class=""btn btn-warning"" onclick=""HideGeneralCodeFileByFileType()"">Cancel</button>

                </fieldset>
                <br />
            </div>

            <div id=""GeneralCodeFileLevelByFileType"">
                <fieldset>
                    <legend style=""color:brown"" id=""Caption"">Add Level</legend>

                    <div class=""row"">
                        <div class=""col-10"">
                            <label for=""fname"">File Type Code:</label>
                        </div>
                        <div class=""col-23"">
                            <input type=""text"" id=""levelFileTypeCodeTxtField"" placeholder=""Tap twice"" />
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-10"">
                            <label for=""fname"">File Type Name:</label>
                        </div>
                        <div class=""col-23"">
                            <input type=""text"" id=""levelFile");
                WriteLiteral(@"TypeNameTxtField"" readonly=""readonly"" />
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-10"">
                            <label for=""fname"">Module:</label>
                        </div>
                        <div class=""col-23"">
                            ");
                EndContext();
                BeginContext(40395, 114, false);
#line 1145 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\Common\GetGeneralCodeFileTypeAll.cshtml"
                       Write(Html.DropDownList("levelmoduleDropDownList", new SelectList("", "Value", "Text"), new { @class = "form-control" }));

#line default
#line hidden
                EndContext();
                BeginContext(40509, 1368, true);
                WriteLiteral(@"
                        </div>
                    </div>
                    <div class=""row"">
                        <div class=""col-10"">
                            Hidden <input type=""checkbox"" name=""isHidden"" value=""isHidden"" id=""levelIsHiddenCheckBox"">
                        </div>
                    </div>

                    <div class=""row"">
                        <table class=""table-hover"">
                            <thead>
                                <tr>
                                    <th>Level Code</th>
                                    <th>Level Name</th>
                                    <th>Company Code</th>
                                </tr>
                            </thead>
                            <tbody id=""tblCodeFileLevelByFileType""></tbody>
                        </table>
                    </div>
                    <button type=""button"" class=""btn btn-primary"" onclick=""UpdateFileType()"">Save</button>
                    <button typ");
                WriteLiteral(@"e=""button"" class=""btn btn-warning"" onclick=""HideGeneralCodeFileByFileType()"">Cancel</button>
                    <button type=""button"" class=""btn btn-success"" data-target=""#levelCreateModel"" data-toggle=""modal"" onclick=""LevelScreenNewBtnClick()"">New</button>

                </fieldset>
                <br />
            </div>
        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(41884, 34, true);
            WriteLiteral("\r\n    </div>\r\n\r\n    \r\n\r\n</div>\r\n\r\n");
            EndContext();
            BeginContext(41949, 469, true);
            WriteLiteral(@"<div class=""modal"" id=""mymodel"">
    <div class=""modal-dialog modal-dialog-centered"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h3 class=""text-center text-primary"">Create New Code File Type</h3>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>

            <div class=""modal-body"">
                <div class=""CreateTypeScreen"">
                    ");
            EndContext();
            BeginContext(42418, 894, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "440147e5fc9f4292a4ddcd87a83c6ca0", async() => {
                BeginContext(42424, 87, true);
                WriteLiteral("\r\n                        <div class=\"form-group\">\r\n                            <label>");
                EndContext();
                BeginContext(42544, 476, true);
                WriteLiteral(@"File Type Code:<span style=""color:red"">*</span></label>
                            <input type=""text"" name="""" class=""form-control"" id=""fileTypeCodeTxtField"" />
                            <label>File Type Name:<span style=""color:red"">*</span></label>
                            <input type=""text"" name="""" class=""form-control"" id=""fileTypeNameTxtField"" />
                            <label>Module:<span style=""color:red"">*</span></label>
                            <p>");
                EndContext();
                BeginContext(43021, 109, false);
#line 1198 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\Common\GetGeneralCodeFileTypeAll.cshtml"
                          Write(Html.DropDownList("moduleDropDownList", new SelectList("", "Value", "Text"), new { @class = "form-control" }));

#line default
#line hidden
                EndContext();
                BeginContext(43130, 175, true);
                WriteLiteral("</p>\r\n                            Hidden <input type=\"checkbox\" name=\"isHidden\" value=\"isHidden\" id=\"isHiddenCheckBox\">\r\n\r\n                        </div>\r\n                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(43312, 26, true);
            WriteLiteral("\r\n                </div>\r\n");
            EndContext();
            BeginContext(43417, 748, true);
            WriteLiteral(@"            </div>
            <div class=""modal-footer justify-content-center"">
                <button type=""button"" class=""btn btn-success"" onclick=""CreateNewFileType()"">Save</button>
            </div>
        </div>
    </div>
</div>

<div class=""modal"" id=""levelCreateModel"">
    <div class=""modal-dialog modal-dialog-centered"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h3 class=""text-center text-primary"" id=""createLevelScreenHeading"">Create File Level</h3>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>

            <div class=""modal-body"">
                <div class=""CreateTypeScreen"">
                    ");
            EndContext();
            BeginContext(44165, 706, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "596c5282a0f340f59d53862ffa46ba3e", async() => {
                BeginContext(44171, 693, true);
                WriteLiteral(@"
                        <div class=""form-group"">
                            <label>Level Name:<span style=""color:red"">*</span></label>
                            <input type=""text"" name="""" class=""form-control"" id=""levelModelLevelNameTxtField"" />
                            <label>Level Code:<span style=""color:red"">*</span></label>
                            <input type=""text"" name="""" class=""form-control"" id=""levelModelLevelCodeTxtField"" />
                            <label>File Code Start From:</label>
                            <input type=""text"" name="""" class=""form-control"" id=""levelModelFileCodeStartFromTxtField"" />
                        </div>
                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(44871, 26, true);
            WriteLiteral("\r\n                </div>\r\n");
            EndContext();
            BeginContext(44980, 754, true);
            WriteLiteral(@"            </div>
            <div class=""modal-footer justify-content-center"">
                <button type=""button"" class=""btn btn-success"" onclick=""CreateNewFileLevel()"">Save</button>
            </div>
        </div>
    </div>
</div>

<div class=""modal"" id=""parentLevelPopUpModel"">
    <div class=""modal-dialog modal-dialog-centered"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h3 class=""text-center text-primary"" id=""parentLevelPopUpScreenHeading"">Parent Level</h3>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>

            <div class=""modal-body"">
                <div class=""CreateTypeScreen"">
                    ");
            EndContext();
            BeginContext(45734, 175, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1f44197f3b6048e28d656856cda31b17", async() => {
                BeginContext(45740, 162, true);
                WriteLiteral("\r\n                        <div class=\"form-group\">\r\n                            <div id=\"parentLevel\"></div>\r\n                        </div>\r\n                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(45909, 279, true);
            WriteLiteral(@"
                </div>
            </div>
            <div class=""modal-footer justify-content-center"">
                <button type=""button"" class=""btn btn-success"" onclick=""CreateNewFileLevel()"">Save</button>
            </div>
        </div>
    </div>
</div>



");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
