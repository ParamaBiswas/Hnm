#pragma checksum "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\Common\CreateUserMapEmployee.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c9fcb2bee434a5177bd4d386062d910cb4eae363"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Common_CreateUserMapEmployee), @"mvc.1.0.view", @"/Views/Common/CreateUserMapEmployee.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Common/CreateUserMapEmployee.cshtml", typeof(AspNetCore.Views_Common_CreateUserMapEmployee))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\_ViewImports.cshtml"
using CenterPointUI;

#line default
#line hidden
#line 2 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\_ViewImports.cshtml"
using CenterPointUI.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"c9fcb2bee434a5177bd4d386062d910cb4eae363", @"/Views/Common/CreateUserMapEmployee.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2edc7cc0f3e77f68ee09f57f8aa10aed8980b104", @"/Views/_ViewImports.cshtml")]
    public class Views_Common_CreateUserMapEmployee : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "0", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "E:\CenterPoint\CenterPointPortal\CenterPointUI\Views\Common\CreateUserMapEmployee.cshtml"
  
    ViewData["Title"] = "CreateUserMapEmployee";

#line default
#line hidden
            BeginContext(57, 16415, true);
            WriteLiteral(@"

<script type=""text/javascript"">

    var server = ""http://192.168.20.152"";
    var requestUrl;

    var objUserList;
    var employeeList;
    var objEmp;
    var objMappedEmp;
    var LoadedUserID;
    var vArray = new Array();
    var vEmployeeArray = new Array();
    var UserMapCode;

    var jObjUserList;
    var LoadedUserName;
    var LoadedUserMapCode;

    var pUserCode = """";
    var pCompanyCode = 1;

    window.onload = function () {
        CheckUserIsLogedIn();
    }

    function CheckUserIsLogedIn() {
        debugger
        GetCookie();

        if (pUserCode != ""NotLogedIn"") {
            //Do your action
        }
        else {
            requestUrl = server + ""/centerpoint/common/CreateUserMapEmployee"";
            Cookies.set('RequestURL', requestUrl, { expires: 1 });
            window.location.href = ""../Login/LoginPageUI"";
        }
    }
    function GetCookie() {
        debugger
        pUserCode = Cookies.get('UserID');

        if (pU");
            WriteLiteral(@"serCode == null || pUserCode == """") {
            // do cookie doesn't exist stuff;
            pUserCode = ""NotLogedIn"";
        }
        else {
            // do cookie exists stuff
            pUserCode = Cookies.get('UserID');
        }
    }
    function getCurrentDate() {
        var today = new Date();
        var dd = today.getDate();
        var mm = today.getMonth() + 1; //January is 0!
        var yyyy = today.getFullYear();

        if (dd < 10) {
            dd = '0' + dd
        }

        if (mm < 10) {
            mm = '0' + mm
        }

        today = yyyy + '-' + mm + '-' + dd;
        //console.log(today);
        document.getElementById(""employeeDateOfBirth"").value = today;
        document.getElementById(""jobStatusChangedDate"").value = today;
    }

    function UserKeyPress() {
        debugger
        var key = event.which || event.keyCode;
        if (key == '119') {
            debugger

            $(""#userListPopUp"").modal({
                sho");
            WriteLiteral(@"w: true,
                backdrop: 'static',
                keyboard: false
            });
        }
    }

    function PreviewBtnClick() {
        $(""#tblUserList tr"").remove();
        vArray = [];
        var pUserName = $(""#popUpNameTxtField"").val();
        var pStringMatchOptionValue = parseInt($(""#popUpStringMatchOptionValue option:selected"").val(), 10);

        debugger
        $.ajax({

            url: server + ""/CoreCommon/api/Common/GetUserList?pUserName="" + pUserName + ""&pStringMatchOptionValue="" + pStringMatchOptionValue,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {

                objUserList = data.listUser;

                LoadUserList(objUserList);
            },
            error: function () {");
            WriteLiteral(@"
                alert(""Failed to User List"");

            }
        });
    }

    function LoadUserList(ObjList) {
        debugger
        if (ObjList.length > 0) {
            for (var i = 0; i < ObjList.length; i++) {
                jObjUserList = {
                    ""tableName_TBL"": null,
                    ""userMapCode_PK"": null,
                    ""employeeCode_FK"": null,
                    ""userId_FK"": ""593EB966-905C-48F9-AC58-699BF4C3EC8F"",
                    ""userName_VW"": ""ehoque4@gmail.com"",
                    ""deptCode_VW"": null,
                    ""userID_VW"": null,
                    ""isActive"": null,
                    ""isActive_VW"": false,
                    ""isNew"": true,
                    ""isDeleted"": false,
                    ""userCode"": null,
                    ""actionType"": null,
                    ""actionDate"": null,
                    ""companyCode_FK"": 0,
                    ""isDirty"": false
                }
                debugger
                v");
            WriteLiteral(@"ar index = $(""#tblUserList"").children(""tr"").length;

                jObjUserList.tableName_TBL = ObjList[i].tableName_TBL;
                jObjUserList.userMapCode_PK = ObjList[i].userMapCode_PK;
                jObjUserList.employeeCode_FK = ObjList[i].employeeCode_FK;
                jObjUserList.userId_FK = ObjList[i].userId_FK;
                jObjUserList.userName_VW = ObjList[i].userName_VW;
                jObjUserList.deptCode_VW = ObjList[i].deptCode_VW;
                jObjUserList.userID_VW = ObjList[i].userID_VW;
                jObjUserList.isActive = ObjList[i].isActive;
                jObjUserList.isActive_VW = ObjList[i].isActive_VW;
                jObjUserList.isNew = ObjList[i].isNew;
                jObjUserList.userCode = ObjList[i].userCode;
                jObjUserList.companyCode_FK = ObjList[i].companyCode_FK;

                

                AssignToUserListTable(jObjUserList.userId_FK, jObjUserList.userName_VW, jObjUserList.userMapCode_PK, jObjUserList.isActive_");
            WriteLiteral(@"VW );
            }
        }
        else {
            alert(""No Data Found!!"");
        }
    }

    function AssignToUserListTable(pUserId, pUserName, pUserMapCode, pIsActiveVw) {
        debugger

        LoadedUserID = pUserId;
        LoadedUserName = pUserName;
        LoadedUserMapCode = pUserMapCode;

        if (pIsActiveVw == true) {
            $(""#isActiveCheckBox"").prop('checked', true);
        }
        else {
            $(""#isActiveCheckBox"").prop('checked', false);
        }
        
        

        var SLno = pUserId;
        var indexCell = ""<td style='display:none'><input type='hidden' name='Documents.Index'  value='"" +
            pUserId +
            ""' /></td>"";

        var SLCell = ""<td><a href='javascript:GetUserByCode(\"""" + pUserId + ""\"",\"""" + pUserName + ""\"")' onclick='GetUserByCode(\"""" + pUserId + ""\"",\"""" + pUserName + ""\"",\"""" + pUserMapCode + ""\"",\"""" + pIsActiveVw + ""\"")' id='"" + pUserId + ""'>"" +
            pUserName +
            ""</a></td>""");
            WriteLiteral(@";

        var newRow = ""<tr id='tblDocuments"" +
            pUserId +
            ""'>"" +
            indexCell +
            SLCell +
            ""</tr>"";

        $(""#tblUserList"").append(newRow);
        vArray.push({ DocumentName: pUserId });

    }

    function GetUserByCode(pUserId, pUserName, pUserMapCode, pIsActive_VW) {
        debugger
        document.getElementById(""userTxtField"").value = pUserName;

        $('#userListPopUp').modal('hide');

        if (pUserMapCode != """" || pUserMapCode != ""undefined"") {
            UserMapCode = pUserMapCode;
            GetMappedEmployeeByUserCode(pUserId, pIsActive_VW);
        }
        else {
            UserMapCode = """";
        }
    }


    function EmployeeIdKeyPress() {
        debugger
        var key = event.which || event.keyCode;
        if (key == '119') {
            debugger
            //var userField = $(""#userTxtField"").val();
            //if (userField != """") {
            //    $(""#employeeListPopUp"")");
            WriteLiteral(@".modal({
            //        show: true,
            //        backdrop: 'static',
            //        keyboard: false
            //    });
            //}
            //else {
            //    alert('Select the User First');
            //}

            $(""#employeeListPopUp"").modal({
                show: true,
                backdrop: 'static',
                keyboard: false
            });
        }
    }

    function EmpPopUpPreviewBtnClick() {
        $(""#tblEmployeeList tr"").remove();
        vEmployeeArray = [];
        var pPopUpEmpId = $(""#empPopUpEmployeeIdTxtField"").val();
        var pPopUpEmpName = $(""#empPopUpEmployeeNameTxtField"").val();
        var pPopUpEmpStringMatchOptionValue = parseInt($(""#StringMatchOptionValue_VW option:selected"").val(), 10);
        var pPopUpEmpJobStatus = parseInt($(""#JobStatus option:selected"").val(), 10);

        debugger
        $.ajax({

            url: server + ""/CoreCommon/api/Employee/GetEmployeeAll"",
            type:");
            WriteLiteral(@" ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert("" An error occurred."");
            },
            success: function (data) {

                employeeList = data.vList;

                LoadEmployeeList(employeeList);
            },
            error: function () {
                alert(""Failed to get Employee List"");

            }
        });
    }

    function LoadEmployeeList(ObjEmpList) {
        debugger
        if (ObjEmpList.length > 0) {
            for (var i = 0; i < ObjEmpList.length; i++) {
                
                LoadedEmployeeID = ObjEmpList[i].employeeCode_PK;

                AssignToEmployeeListTable(ObjEmpList[i].employeeCode_PK, ObjEmpList[i].employeeId, ObjEmpList[i].name, ObjEmpList[i].designation_VW, ObjEmpList[i].department_VW);
            }
        }
        else {
            ");
            WriteLiteral(@"alert(""No Data Found!!"");
        }
    }

    function AssignToEmployeeListTable(pEmployeeCode, pEmployeeID, pEmployeeName, pEmployeeDesignation, pEmployeeDepartment) {
        debugger
        var SLno = pEmployeeID;
        var indexCell = ""<td style='display:none'><input type='hidden' name='Documents.Index'  value='"" +
            pEmployeeCode +
            ""' /></td>"";

        var EmployeeIDCell = ""<td><a href='javascript:GetSelectedEmpByID(\"""" + pEmployeeID + ""\"")' onclick='GetSelectedEmpByID(\"""" + pEmployeeID + ""\"")' id='"" + pEmployeeID + ""'>"" +
            pEmployeeID +
            ""</a></td>"";


        var EmployeeNameCell = ""<td><input type='hidden'   id='Documents"" +
            pEmployeeCode +
            ""_pTcType' name='Documents["" +
            pEmployeeCode +
            ""].pTcType' value='"" +
            pEmployeeName +
            ""' />"" +
            pEmployeeName +
            ""</td>"";
        var EmployeeDesignationCell = ""<td><input type='hidden'   id='Documen");
            WriteLiteral(@"ts"" +
            pEmployeeCode +
            ""_pTcType' name='Documents["" +
            pEmployeeCode +
            ""].pTcType' value='"" +
            pEmployeeDesignation +
            ""' />"" +
            pEmployeeDesignation +
            ""</td>"";

        var EmployeeDepartmentCell = ""<td><input type='hidden'   id='Documents"" +
            pEmployeeCode +
            ""_pTcType' name='Documents["" +
            pEmployeeCode +
            ""].pTcType' value='"" +
            pEmployeeDepartment +
            ""' />"" +
            pEmployeeDepartment +
            ""</td>"";


        var newRow = ""<tr id='tblDocuments"" +
            pEmployeeCode +
            ""'>"" +
            EmployeeIDCell +
            EmployeeNameCell +
            EmployeeDesignationCell +
            EmployeeDepartmentCell +
            ""</tr>"";

        $(""#tblEmployeeList"").append(newRow);
        vEmployeeArray.push({ DocumentName: pEmployeeCode });

    }

    function GetSelectedEmpByID(pEmpId)
 ");
            WriteLiteral(@"   {
        debugger
        $.ajax({

            url: server + ""/CoreCommon/api/Employee/GetEmployeeByID?pEmployeeId="" + pEmpId + ""&pCompanyCode="" + pCompanyCode,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert(""LS_BROWSER Error: An error has occurred."");
            },
            success: function (data) {

                objEmp = data.objEmployee;

                AssignSelectedEmployee(objEmp);

                $('#employeeListPopUp').modal('hide');
            },
            error: function () {
                alert(""LS_API Error: Failed to get Employee"");

            }
        });
    }

    function AssignSelectedEmployee(pObjEmp) {
        debugger
        //var isNew = pObjEmp.isNew;
        //document.getElementById(""employeeDateOfBirth"").value
        document.getElementById(""idTx");
            WriteLiteral(@"tField"").value = pObjEmp.employeeId;
        document.getElementById(""employeeNameTxtField"").value = pObjEmp.name;
        document.getElementById(""employeeDesignationTxtField"").value = pObjEmp.designation_VW;
        document.getElementById(""employeeDepartmentTxtField"").value = pObjEmp.department_VW;
        document.getElementById(""employeeLocationTxtField"").value = pObjEmp.presentAddress;

        if (pObjEmp.jobStatus == 0) {
            document.getElementById(""employeeEmployeeTypeTxtField"").value = ""Non-Confirm"";
        }
        if (pObjEmp.jobStatus == 1) {
            document.getElementById(""employeeEmployeeTypeTxtField"").value = ""Confirm"";
        }
    }

    function SaveBtnClick() {
        var ObjMain = {
            ""TableName_TBL"": """",
            ""UserMapCode_PK"": """",
            ""EmployeeCode_FK"": ""f73504f6-747b-47cf-a1ed-27258c8b88f9"",
            ""EmployeeId_VW"": """",
            ""UserId_FK"": ""E459BED2-8B25-498B-A885-99643C90C904"",
            ""UserName_VW"": ""emiyatoufique");
            WriteLiteral(@"@gmail.com"",
            ""DeptCode_VW"": """",
            ""UserID_VW"": """",
            ""UserCode"": ""0E2C7D4B-B442-4A75-8D53-581EA847C0CB"",
            ""IsActive"": 1,
            ""IsActive_VW"": true
        }
        ObjMain.UserMapCode_PK = UserMapCode;
        ObjMain.EmployeeCode_FK = objEmp.employeeCode_PK;
        ObjMain.UserId_FK = LoadedUserID;
        ObjMain.UserName_VW = LoadedUserName;
        ObjMain.UserCode = pUserCode; //pUserCode means Logged In user Code

        var isChecked = $(""#isActiveCheckBox"").prop(""checked"");
        if (isChecked) {
            ObjMain.IsActive = 1;
            ObjMain.IsActive_VW = true;
        }
        else {
            ObjMain.IsActive = 0;
            ObjMain.IsActive_VW = false;
        }

        debugger
        var datas = JSON.stringify(ObjMain);

        $.ajax(
            {

                url: server + ""/CoreCommon/api/Common/CreateUserMapEmployee"",
                dataType: ""json"",
                processData: false,
      ");
            WriteLiteral(@"          contentType: 'application/json',
                type: ""POST"",
                data: datas,
                success: function (data) {
                    document.location.reload();
                    alert(data.message);
                },
                error: function () {
                    alert(""LS_BROWSER Error: There was error saving data!"");
                }
            }
        );
        
    }

    function GetMappedEmployeeByUserCode(pUserCode, pIsActive_VW) {
        
        debugger
        var Active;
        //var isChecked = $(""#isActiveCheckBox"").prop(""checked"");
        if (pIsActive_VW == true) {
            Active = true;
        }
        else {
            Active = false;
        }

        $.ajax({

            url: server + ""/CoreCommon/api/Common/GetUserMapEmployeeByUserCode?pUserCode="" + pUserCode + ""&isActive="" + Active,
            type: ""Get"",
            datatype: ""json"",
            contentType: ""application/json"",
            ");
            WriteLiteral(@"data: { get_param: 'value' },
            crossDomain: ""true"",

            error: function () {
                alert(""LS_BROWSER Error: An error has occurred."");
            },
            success: function (data) {

                objMappedEmp = data.objUserMapEmployee;

                AssignMappedEmployee(objMappedEmp);

                //$('#employeeListPopUp').modal('hide');
            },
            error: function () {
                alert(""LS_API Error: Failed to get Employee"");

            }
        });
    }

    function AssignMappedEmployee(pObjEmp) {
        debugger
        //var isNew = pObjEmp.isNew;
        //document.getElementById(""employeeDateOfBirth"").value
        document.getElementById(""idTxtField"").value = pObjEmp.userID_VW;
        document.getElementById(""employeeNameTxtField"").value = pObjEmp.userName_VW;
        document.getElementById(""employeeDepartmentTxtField"").value = pObjEmp.deptCode_VW;
    }

</script>


<div class=""body-content"">

");
            WriteLiteral("    <div class=\"box\">\r\n        ");
            EndContext();
            BeginContext(16472, 789, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4157f79bcb9944e2a4b563f42cc3e1ae", async() => {
                BeginContext(16478, 776, true);
                WriteLiteral(@"
            <fieldset>
                <legend style=""color:brown"">User</legend>

                <div class=""row"">
                    <div class=""col-10"">
                        <label for=""fname"">User:<span style=""color:red"">*</span></label>
                    </div>
                    <div class=""col-23"">
                        <input type=""text"" id=""userTxtField"" readonly=""readonly"" placeholder=""Press F8"" onkeydown=""UserKeyPress()"" />
                    </div>
                    <div class=""col-23"">
                        <input type=""checkbox"" name=""isActive"" value=""isActive"" id=""isActiveCheckBox""><label for=""fname"">Is Active</label>
                    </div>

                </div>
            </fieldset>
            <br />
        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(17261, 47, true);
            WriteLiteral("\r\n    </div>\r\n\r\n    <div class=\"box\">\r\n        ");
            EndContext();
            BeginContext(17308, 2214, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "3256df05d6804e478cc8be83be329d97", async() => {
                BeginContext(17314, 2201, true);
                WriteLiteral(@"
            <fieldset>
                <legend style=""color:brown"">Employee Info</legend>

                <div class=""row"">
                    <div class=""col-10"">
                        <label for=""fname"">ID:<span style=""color:red"">*</span></label>
                    </div>
                    <div class=""col-23"">
                        <input type=""text"" id=""idTxtField"" readonly=""readonly"" placeholder=""Press F8"" onkeydown=""EmployeeIdKeyPress()"" />
                    </div>
                    <div class=""col-10"">
                        <label for=""fname"">Name:</label>
                    </div>
                    <div class=""col-23"">
                        <input type=""text"" id=""employeeNameTxtField"" readonly=""readonly"" />
                    </div>
                </div>

                <div class=""row"">
                    <div class=""col-10"">
                        <label for=""fname"">Designation:</label>
                    </div>
                    <div class=""col-23""");
                WriteLiteral(@">
                        <input type=""text"" id=""employeeDesignationTxtField"" readonly=""readonly"" />
                    </div>
                    <div class=""col-10"">
                        <label for=""fname"">Department:</label>
                    </div>
                    <div class=""col-23"">
                        <input type=""text"" id=""employeeDepartmentTxtField"" readonly=""readonly"" />
                    </div>
                </div>
                <div class=""row"">
                    <div class=""col-10"">
                        <label for=""fname"">Employee Type:</label>
                    </div>
                    <div class=""col-23"">
                        <input type=""text"" id=""employeeEmployeeTypeTxtField"" readonly=""readonly"" />
                    </div>
                    <div class=""col-10"">
                        <label for=""fname"">Location:</label>
                    </div>
                    <div class=""col-23"">
                        <input type=""text"" id=""em");
                WriteLiteral("ployeeLocationTxtField\" readonly=\"readonly\" />\r\n                    </div>\r\n                </div>\r\n            </fieldset>\r\n            <br />\r\n        ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(19522, 249, true);
            WriteLiteral("\r\n    </div>\r\n\r\n\r\n    <div class=\"submitBtn\">\r\n        <button type=\"button\" onclick=\"NewBtnClick()\" style=\"width:100px\">New</button>\r\n        <button type=\"button\" onclick=\"SaveBtnClick()\" style=\"width:100px\">Save</button>\r\n    </div>\r\n\r\n</div>\r\n\r\n");
            EndContext();
            BeginContext(19802, 464, true);
            WriteLiteral(@"<div class=""modal fade"" id=""userListPopUp"">
    <div class=""modal-dialog modal-dialog-centered"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h3 class=""text-center text-primary"">User List</h3>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>

            <div class=""modal-body"">
                <div class=""CreateTypeScreen"">
                    ");
            EndContext();
            BeginContext(20266, 1861, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4c6ec783616448dba8f55accad2a5b18", async() => {
                BeginContext(20272, 196, true);
                WriteLiteral("\r\n                        <div class=\"form-group\">\r\n                            <div class=\"row\">\r\n                                <div class=\"col-10\">\r\n                                    <label>");
                EndContext();
                BeginContext(20501, 474, true);
                WriteLiteral(@"Name:</label>
                                </div>
                                <div class=""col-23"">
                                    <input type=""text"" name="""" class=""form-control"" id=""popUpNameTxtField"" />
                                </div>
                                <div class=""col-23"">
                                    <select id=""popUpStringMatchOptionValue"" style=""margin-top:2px; margin-left:30px"">
                                        ");
                EndContext();
                BeginContext(20975, 33, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "bdb84c4b2b8243ebb290a92b31065681", async() => {
                    BeginContext(20993, 6, true);
                    WriteLiteral("Likely");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(21008, 42, true);
                WriteLiteral("\r\n                                        ");
                EndContext();
                BeginContext(21050, 37, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "80620cd4cfd64c2386fc35d5764b7de2", async() => {
                    BeginContext(21068, 10, true);
                    WriteLiteral("StartsWith");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(21087, 42, true);
                WriteLiteral("\r\n                                        ");
                EndContext();
                BeginContext(21129, 35, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "67d94049ec8641c185f2ebbff0d4787f", async() => {
                    BeginContext(21147, 8, true);
                    WriteLiteral("EndsWith");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(21164, 956, true);
                WriteLiteral(@"
                                    </select>
                                </div>
                            </div>
                            <div class=""row"">
                                <div class=""submitBtn"">
                                    <button type=""button"" class=""btn btn-success"" onclick=""PreviewBtnClick()"">Preview</button>
                                </div>
                            </div>
                            <br />
                            <table class=""table-hover"" border=""1"" align=""center"">
                                <thead bgcolor=""#FF0000"">
                                    <tr>
                                        <th>User Name  </th>
                                    </tr>
                                </thead>
                                <tbody id=""tblUserList""></tbody>
                            </table>
                        </div>
                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(22127, 48, true);
            WriteLiteral("\r\n                </div>\r\n\r\n            </div>\r\n");
            EndContext();
            BeginContext(22377, 40, true);
            WriteLiteral("        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n");
            EndContext();
            BeginContext(22443, 472, true);
            WriteLiteral(@"<div class=""modal fade"" id=""employeeListPopUp"">
    <div class=""modal-dialog modal-dialog-centered"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h3 class=""text-center text-primary"">Employee List</h3>
                <button type=""button"" class=""close"" data-dismiss=""modal"">&times;</button>
            </div>

            <div class=""modal-body"">
                <div class=""CreateTypeScreen"">
                    ");
            EndContext();
            BeginContext(22915, 4120, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a2f6bb731e964c6685405f3b97ed01f1", async() => {
                BeginContext(22921, 1140, true);
                WriteLiteral(@"
                        <div class=""form-group"">
                            <div class=""row"">
                                <div class=""col-10"">
                                    <label>Employee ID:</label>
                                </div>
                                <div class=""col-23"" style=""margin-left:30px"">
                                    <input type=""text"" name="""" class=""form-control"" id=""empPopUpEmployeeIdTxtField"" />
                                </div>

                                <div class=""col-10""  style=""margin-left:30px"">
                                    <label>Employee Name:</label>
                                </div>
                                <div class=""col-23""  style=""margin-left:30px"">
                                    <input type=""text"" name="""" class=""form-control"" id=""empPopUpEmployeeNameTxtField"" />
                                </div>
                                <div class=""col-10"">
                                    <selec");
                WriteLiteral("t id=\"StringMatchOptionValue_VW\" style=\"margin-top:2px; margin-left:30px\">\r\n                                        ");
                EndContext();
                BeginContext(24061, 33, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "a8c16f13ff4848868accc33cb6485d3f", async() => {
                    BeginContext(24079, 6, true);
                    WriteLiteral("Likely");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(24094, 42, true);
                WriteLiteral("\r\n                                        ");
                EndContext();
                BeginContext(24136, 37, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "c058e4ad33744b0e8037d209b1a5e9ec", async() => {
                    BeginContext(24154, 10, true);
                    WriteLiteral("StartsWith");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(24173, 42, true);
                WriteLiteral("\r\n                                        ");
                EndContext();
                BeginContext(24215, 35, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6fc9f5a60e0e46c994eb022302b6e381", async() => {
                    BeginContext(24233, 8, true);
                    WriteLiteral("EndsWith");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(24250, 526, true);
                WriteLiteral(@"
                                    </select>
                                </div>
                            </div>
                            <div class=""row"">
                                <div class=""col-10"">
                                    <label>Job Status:</label>
                                </div>
                                <div class=""col-23"">
                                    <select id=""JobStatus"" style=""margin-top:2px; margin-left:30px"">
                                        ");
                EndContext();
                BeginContext(24776, 38, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "6129da02652c45e3ba317386e4ae5a0d", async() => {
                    BeginContext(24794, 11, true);
                    WriteLiteral("Non-Confirm");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(24814, 42, true);
                WriteLiteral("\r\n                                        ");
                EndContext();
                BeginContext(24856, 34, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "8aeb0a31646c446ebab71b686eadce36", async() => {
                    BeginContext(24874, 7, true);
                    WriteLiteral("Confirm");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_2.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(24890, 2138, true);
                WriteLiteral(@"
                                    </select>
                                </div>

                                <div class=""col-10"">
                                    <label>Designation:</label>
                                </div>
                                <div class=""col-23""  style=""margin-left:30px"">
                                    <input type=""text"" id=""empPopUpdesignationTxtField"" readonly=""readonly"" placeholder=""Press F8"" onkeydown=""DesignationKeyPress()"" />
                                </div>
                            </div>
                            <div class=""row"">
                                <div class=""col-10"">
                                    <label>Employment Type:</label>
                                </div>
                                <div class=""col-23""  style=""margin-left:30px"">
                                    <input type=""text"" id=""empPopUpEmploymentTypeTxtField"" readonly=""readonly"" placeholder=""Press F8"" onkeydown=""EmploymentKeyP");
                WriteLiteral(@"ress()"" />
                                </div>
                            </div>

                            <div class=""row"">
                                <div class=""submitBtn"">
                                    <button type=""button"" class=""btn btn-success"" onclick=""EmpPopUpPreviewBtnClick()"">Preview</button>
                                </div>
                            </div>
                            <br />
                            <table class=""table-hover"" border=""1"" align=""center"">
                                <thead bgcolor=""#FF0000"">
                                    <tr>
                                        <th>ID | </th>
                                        <th>Name | </th>
                                        <th>Designation | </th>
                                        <th>Department | </th>
                                    </tr>
                                </thead>
                                <tbody id=""tblEmployeeList""></tbody>
");
                WriteLiteral("                            </table>\r\n                        </div>\r\n                    ");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
            __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(27035, 48, true);
            WriteLiteral("\r\n                </div>\r\n\r\n            </div>\r\n");
            EndContext();
            BeginContext(27285, 36, true);
            WriteLiteral("        </div>\r\n    </div>\r\n</div>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
